strict digraph deps {
node[shape=rect]
splines=ortho
"my-project" [style=dashed];
"aff" -> "control";
"aff" -> "datetime";
"aff" -> "effect";
"aff" -> "either";
"aff" -> "exceptions";
"aff" -> "functions";
"aff" -> "newtype";
"aff" -> "parallel";
"aff" -> "partial";
"aff" -> "prelude";
"aff" -> "st";
"aff" -> "tailrec";
"aff" -> "transformers";
"aff" -> "unsafe-coerce";
"ansi" -> "foldable-traversable";
"ansi" -> "lists";
"ansi" -> "prelude";
"argonaut-codecs" -> "argonaut-core";
"argonaut-codecs" -> "arrays";
"argonaut-codecs" -> "bifunctors";
"argonaut-codecs" -> "either";
"argonaut-codecs" -> "foldable-traversable";
"argonaut-codecs" -> "foreign-object";
"argonaut-codecs" -> "identity";
"argonaut-codecs" -> "integers";
"argonaut-codecs" -> "lists";
"argonaut-codecs" -> "maybe";
"argonaut-codecs" -> "nonempty";
"argonaut-codecs" -> "ordered-collections";
"argonaut-codecs" -> "prelude";
"argonaut-codecs" -> "record";
"argonaut-codecs" -> "strings";
"argonaut-codecs" -> "tuples";
"argonaut-core" -> "arrays";
"argonaut-core" -> "control";
"argonaut-core" -> "either";
"argonaut-core" -> "foreign-object";
"argonaut-core" -> "functions";
"argonaut-core" -> "gen";
"argonaut-core" -> "maybe";
"argonaut-core" -> "nonempty";
"argonaut-core" -> "prelude";
"argonaut-core" -> "strings";
"argonaut-core" -> "tailrec";
"arrays" -> "bifunctors";
"arrays" -> "control";
"arrays" -> "foldable-traversable";
"arrays" -> "functions";
"arrays" -> "maybe";
"arrays" -> "nonempty";
"arrays" -> "partial";
"arrays" -> "prelude";
"arrays" -> "safe-coerce";
"arrays" -> "st";
"arrays" -> "tailrec";
"arrays" -> "tuples";
"arrays" -> "unfoldable";
"arrays" -> "unsafe-coerce";
"avar" -> "aff";
"avar" -> "effect";
"avar" -> "either";
"avar" -> "exceptions";
"avar" -> "functions";
"avar" -> "maybe";
"avar" -> "prelude";
"bifunctors" -> "const";
"bifunctors" -> "either";
"bifunctors" -> "newtype";
"bifunctors" -> "prelude";
"bifunctors" -> "tuples";
"catenable-lists" -> "control";
"catenable-lists" -> "foldable-traversable";
"catenable-lists" -> "lists";
"catenable-lists" -> "maybe";
"catenable-lists" -> "prelude";
"catenable-lists" -> "tuples";
"catenable-lists" -> "unfoldable";
"console" -> "effect";
"console" -> "prelude";
"const" -> "invariant";
"const" -> "newtype";
"const" -> "prelude";
"contravariant" -> "const";
"contravariant" -> "either";
"contravariant" -> "newtype";
"contravariant" -> "prelude";
"contravariant" -> "tuples";
"control" -> "newtype";
"control" -> "prelude";
"datetime" -> "bifunctors";
"datetime" -> "control";
"datetime" -> "either";
"datetime" -> "enums";
"datetime" -> "foldable-traversable";
"datetime" -> "functions";
"datetime" -> "gen";
"datetime" -> "integers";
"datetime" -> "lists";
"datetime" -> "maybe";
"datetime" -> "newtype";
"datetime" -> "numbers";
"datetime" -> "ordered-collections";
"datetime" -> "partial";
"datetime" -> "prelude";
"datetime" -> "tuples";
"distributive" -> "identity";
"distributive" -> "newtype";
"distributive" -> "prelude";
"distributive" -> "tuples";
"distributive" -> "type-equality";
"effect" -> "prelude";
"either" -> "control";
"either" -> "invariant";
"either" -> "maybe";
"either" -> "prelude";
"enums" -> "control";
"enums" -> "either";
"enums" -> "gen";
"enums" -> "maybe";
"enums" -> "newtype";
"enums" -> "nonempty";
"enums" -> "partial";
"enums" -> "prelude";
"enums" -> "tuples";
"enums" -> "unfoldable";
"exceptions" -> "effect";
"exceptions" -> "either";
"exceptions" -> "maybe";
"exceptions" -> "prelude";
"exists" -> "unsafe-coerce";
"exitcodes" -> "enums";
"exitcodes" -> "maybe";
"exitcodes" -> "prelude";
"foldable-traversable" -> "bifunctors";
"foldable-traversable" -> "const";
"foldable-traversable" -> "control";
"foldable-traversable" -> "either";
"foldable-traversable" -> "functors";
"foldable-traversable" -> "identity";
"foldable-traversable" -> "maybe";
"foldable-traversable" -> "newtype";
"foldable-traversable" -> "orders";
"foldable-traversable" -> "prelude";
"foldable-traversable" -> "tuples";
"foreign" -> "either";
"foreign" -> "functions";
"foreign" -> "integers";
"foreign" -> "lists";
"foreign" -> "maybe";
"foreign" -> "prelude";
"foreign" -> "strings";
"foreign" -> "transformers";
"foreign" -> "unsafe-coerce";
"foreign-object" -> "arrays";
"foreign-object" -> "foldable-traversable";
"foreign-object" -> "functions";
"foreign-object" -> "gen";
"foreign-object" -> "lists";
"foreign-object" -> "maybe";
"foreign-object" -> "prelude";
"foreign-object" -> "st";
"foreign-object" -> "tailrec";
"foreign-object" -> "tuples";
"foreign-object" -> "typelevel-prelude";
"foreign-object" -> "unfoldable";
"foreign-object" -> "unsafe-coerce";
"fork" -> "aff";
"fork" -> "prelude";
"fork" -> "transformers";
"free" -> "catenable-lists";
"free" -> "control";
"free" -> "distributive";
"free" -> "either";
"free" -> "exists";
"free" -> "foldable-traversable";
"free" -> "invariant";
"free" -> "lazy";
"free" -> "maybe";
"free" -> "prelude";
"free" -> "tailrec";
"free" -> "transformers";
"free" -> "tuples";
"free" -> "unsafe-coerce";
"functions" -> "prelude";
"functors" -> "bifunctors";
"functors" -> "const";
"functors" -> "contravariant";
"functors" -> "control";
"functors" -> "distributive";
"functors" -> "either";
"functors" -> "invariant";
"functors" -> "maybe";
"functors" -> "newtype";
"functors" -> "prelude";
"functors" -> "profunctor";
"functors" -> "tuples";
"functors" -> "unsafe-coerce";
"gen" -> "either";
"gen" -> "foldable-traversable";
"gen" -> "identity";
"gen" -> "maybe";
"gen" -> "newtype";
"gen" -> "nonempty";
"gen" -> "prelude";
"gen" -> "tailrec";
"gen" -> "tuples";
"gen" -> "unfoldable";
"identity" -> "control";
"identity" -> "invariant";
"identity" -> "newtype";
"identity" -> "prelude";
"integers" -> "maybe";
"integers" -> "numbers";
"integers" -> "prelude";
"invariant" -> "control";
"invariant" -> "prelude";
"js-date" -> "datetime";
"js-date" -> "effect";
"js-date" -> "enums";
"js-date" -> "foreign";
"js-date" -> "functions";
"js-date" -> "integers";
"js-date" -> "maybe";
"js-date" -> "prelude";
"lazy" -> "control";
"lazy" -> "foldable-traversable";
"lazy" -> "invariant";
"lazy" -> "prelude";
"lists" -> "bifunctors";
"lists" -> "control";
"lists" -> "foldable-traversable";
"lists" -> "lazy";
"lists" -> "maybe";
"lists" -> "newtype";
"lists" -> "nonempty";
"lists" -> "partial";
"lists" -> "prelude";
"lists" -> "tailrec";
"lists" -> "tuples";
"lists" -> "unfoldable";
"maybe" -> "control";
"maybe" -> "invariant";
"maybe" -> "newtype";
"maybe" -> "prelude";
"mmorph" -> "bifunctors";
"mmorph" -> "either";
"mmorph" -> "free";
"mmorph" -> "functors";
"mmorph" -> "identity";
"mmorph" -> "maybe";
"mmorph" -> "newtype";
"mmorph" -> "prelude";
"mmorph" -> "transformers";
"mmorph" -> "tuples";
"my-project" -> "console";
"my-project" -> "effect";
"my-project" -> "prelude";
"newtype" -> "prelude";
"newtype" -> "safe-coerce";
"node-buffer" -> "arraybuffer-types";
"node-buffer" -> "effect";
"node-buffer" -> "functions";
"node-buffer" -> "maybe";
"node-buffer" -> "nullable";
"node-buffer" -> "partial";
"node-buffer" -> "prelude";
"node-buffer" -> "st";
"node-buffer" -> "unsafe-coerce";
"node-event-emitter" -> "effect";
"node-event-emitter" -> "either";
"node-event-emitter" -> "functions";
"node-event-emitter" -> "maybe";
"node-event-emitter" -> "nullable";
"node-event-emitter" -> "prelude";
"node-event-emitter" -> "unsafe-coerce";
"node-fs" -> "aff";
"node-fs" -> "datetime";
"node-fs" -> "effect";
"node-fs" -> "either";
"node-fs" -> "enums";
"node-fs" -> "exceptions";
"node-fs" -> "functions";
"node-fs" -> "integers";
"node-fs" -> "js-date";
"node-fs" -> "maybe";
"node-fs" -> "node-buffer";
"node-fs" -> "node-path";
"node-fs" -> "node-streams";
"node-fs" -> "nullable";
"node-fs" -> "partial";
"node-fs" -> "prelude";
"node-fs" -> "strings";
"node-path" -> "effect";
"node-process" -> "effect";
"node-process" -> "exceptions";
"node-process" -> "foreign";
"node-process" -> "foreign-object";
"node-process" -> "maybe";
"node-process" -> "node-event-emitter";
"node-process" -> "node-streams";
"node-process" -> "nullable";
"node-process" -> "posix-types";
"node-process" -> "prelude";
"node-process" -> "strings";
"node-streams" -> "aff";
"node-streams" -> "arrays";
"node-streams" -> "effect";
"node-streams" -> "either";
"node-streams" -> "exceptions";
"node-streams" -> "maybe";
"node-streams" -> "node-buffer";
"node-streams" -> "node-event-emitter";
"node-streams" -> "nullable";
"node-streams" -> "prelude";
"node-streams" -> "refs";
"node-streams" -> "st";
"node-streams" -> "tailrec";
"node-streams" -> "unsafe-coerce";
"nonempty" -> "control";
"nonempty" -> "foldable-traversable";
"nonempty" -> "maybe";
"nonempty" -> "prelude";
"nonempty" -> "tuples";
"nonempty" -> "unfoldable";
"now" -> "datetime";
"now" -> "effect";
"now" -> "prelude";
"nullable" -> "functions";
"nullable" -> "maybe";
"nullable" -> "prelude";
"numbers" -> "functions";
"numbers" -> "maybe";
"numbers" -> "prelude";
"open-memoize" -> "either";
"open-memoize" -> "integers";
"open-memoize" -> "lazy";
"open-memoize" -> "lists";
"open-memoize" -> "maybe";
"open-memoize" -> "partial";
"open-memoize" -> "prelude";
"open-memoize" -> "strings";
"open-memoize" -> "tuples";
"optparse" -> "arrays";
"optparse" -> "bifunctors";
"optparse" -> "control";
"optparse" -> "effect";
"optparse" -> "either";
"optparse" -> "enums";
"optparse" -> "exists";
"optparse" -> "exitcodes";
"optparse" -> "foldable-traversable";
"optparse" -> "free";
"optparse" -> "integers";
"optparse" -> "lazy";
"optparse" -> "lists";
"optparse" -> "maybe";
"optparse" -> "newtype";
"optparse" -> "node-buffer";
"optparse" -> "node-process";
"optparse" -> "node-streams";
"optparse" -> "nonempty";
"optparse" -> "numbers";
"optparse" -> "open-memoize";
"optparse" -> "partial";
"optparse" -> "prelude";
"optparse" -> "strings";
"optparse" -> "tailrec";
"optparse" -> "transformers";
"optparse" -> "tuples";
"ordered-collections" -> "arrays";
"ordered-collections" -> "control";
"ordered-collections" -> "foldable-traversable";
"ordered-collections" -> "functions";
"ordered-collections" -> "gen";
"ordered-collections" -> "lists";
"ordered-collections" -> "maybe";
"ordered-collections" -> "newtype";
"ordered-collections" -> "partial";
"ordered-collections" -> "prelude";
"ordered-collections" -> "safe-coerce";
"ordered-collections" -> "tailrec";
"ordered-collections" -> "tuples";
"ordered-collections" -> "unfoldable";
"orders" -> "newtype";
"orders" -> "prelude";
"parallel" -> "control";
"parallel" -> "effect";
"parallel" -> "either";
"parallel" -> "foldable-traversable";
"parallel" -> "functors";
"parallel" -> "maybe";
"parallel" -> "newtype";
"parallel" -> "prelude";
"parallel" -> "profunctor";
"parallel" -> "refs";
"parallel" -> "transformers";
"pipes" -> "aff";
"pipes" -> "control";
"pipes" -> "effect";
"pipes" -> "either";
"pipes" -> "foldable-traversable";
"pipes" -> "identity";
"pipes" -> "lists";
"pipes" -> "maybe";
"pipes" -> "mmorph";
"pipes" -> "newtype";
"pipes" -> "prelude";
"pipes" -> "tailrec";
"pipes" -> "transformers";
"pipes" -> "tuples";
"posix-types" -> "maybe";
"posix-types" -> "newtype";
"posix-types" -> "prelude";
"profunctor" -> "control";
"profunctor" -> "distributive";
"profunctor" -> "either";
"profunctor" -> "exists";
"profunctor" -> "invariant";
"profunctor" -> "newtype";
"profunctor" -> "prelude";
"profunctor" -> "tuples";
"record" -> "functions";
"record" -> "prelude";
"record" -> "unsafe-coerce";
"refs" -> "effect";
"refs" -> "prelude";
"safe-coerce" -> "unsafe-coerce";
"spec" -> "aff";
"spec" -> "ansi";
"spec" -> "arrays";
"spec" -> "avar";
"spec" -> "bifunctors";
"spec" -> "control";
"spec" -> "datetime";
"spec" -> "effect";
"spec" -> "either";
"spec" -> "exceptions";
"spec" -> "foldable-traversable";
"spec" -> "fork";
"spec" -> "identity";
"spec" -> "integers";
"spec" -> "lists";
"spec" -> "maybe";
"spec" -> "newtype";
"spec" -> "now";
"spec" -> "ordered-collections";
"spec" -> "parallel";
"spec" -> "pipes";
"spec" -> "prelude";
"spec" -> "refs";
"spec" -> "strings";
"spec" -> "tailrec";
"spec" -> "transformers";
"spec" -> "tuples";
"spec-node" -> "aff";
"spec-node" -> "argonaut-codecs";
"spec-node" -> "argonaut-core";
"spec-node" -> "arrays";
"spec-node" -> "control";
"spec-node" -> "datetime";
"spec-node" -> "effect";
"spec-node" -> "either";
"spec-node" -> "foldable-traversable";
"spec-node" -> "identity";
"spec-node" -> "integers";
"spec-node" -> "maybe";
"spec-node" -> "newtype";
"spec-node" -> "node-buffer";
"spec-node" -> "node-fs";
"spec-node" -> "node-process";
"spec-node" -> "now";
"spec-node" -> "numbers";
"spec-node" -> "optparse";
"spec-node" -> "ordered-collections";
"spec-node" -> "partial";
"spec-node" -> "prelude";
"spec-node" -> "spec";
"spec-node" -> "strings";
"spec-node" -> "tuples";
"st" -> "effect";
"st" -> "partial";
"st" -> "prelude";
"st" -> "tailrec";
"st" -> "unsafe-coerce";
"strings" -> "arrays";
"strings" -> "control";
"strings" -> "either";
"strings" -> "enums";
"strings" -> "foldable-traversable";
"strings" -> "gen";
"strings" -> "integers";
"strings" -> "maybe";
"strings" -> "newtype";
"strings" -> "nonempty";
"strings" -> "partial";
"strings" -> "prelude";
"strings" -> "tailrec";
"strings" -> "tuples";
"strings" -> "unfoldable";
"strings" -> "unsafe-coerce";
"tailrec" -> "bifunctors";
"tailrec" -> "effect";
"tailrec" -> "either";
"tailrec" -> "identity";
"tailrec" -> "maybe";
"tailrec" -> "partial";
"tailrec" -> "prelude";
"tailrec" -> "refs";
"transformers" -> "control";
"transformers" -> "distributive";
"transformers" -> "effect";
"transformers" -> "either";
"transformers" -> "exceptions";
"transformers" -> "foldable-traversable";
"transformers" -> "identity";
"transformers" -> "lazy";
"transformers" -> "maybe";
"transformers" -> "newtype";
"transformers" -> "prelude";
"transformers" -> "st";
"transformers" -> "tailrec";
"transformers" -> "tuples";
"transformers" -> "unfoldable";
"tuples" -> "control";
"tuples" -> "invariant";
"tuples" -> "prelude";
"typelevel-prelude" -> "prelude";
"typelevel-prelude" -> "type-equality";
"unfoldable" -> "foldable-traversable";
"unfoldable" -> "maybe";
"unfoldable" -> "partial";
"unfoldable" -> "prelude";
"unfoldable" -> "tuples";
}
