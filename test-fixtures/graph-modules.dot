strict digraph modules {
node[shape=rect]
splines=ortho
"Main" [style=dashed];
"Ansi.Codes" -> "Prelude";
"Ansi.Codes" -> "Data.Foldable";
"Ansi.Codes" -> "Data.Generic.Rep";
"Ansi.Codes" -> "Data.List.NonEmpty";
"Ansi.Codes" -> "Data.Show.Generic";
"Ansi.Output" -> "Prelude";
"Ansi.Output" -> "Data.List.NonEmpty";
"Ansi.Output" -> "Ansi.Codes";
"Control.Alt" -> "Data.Functor";
"Control.Alt" -> "Data.Semigroup";
"Control.Alternative" -> "Control.Alt";
"Control.Alternative" -> "Control.Applicative";
"Control.Alternative" -> "Control.Apply";
"Control.Alternative" -> "Control.Plus";
"Control.Alternative" -> "Data.Unit";
"Control.Alternative" -> "Data.Functor";
"Control.Applicative" -> "Control.Apply";
"Control.Applicative" -> "Data.Functor";
"Control.Applicative" -> "Data.Unit";
"Control.Applicative" -> "Type.Proxy";
"Control.Apply" -> "Data.Functor";
"Control.Apply" -> "Data.Function";
"Control.Apply" -> "Control.Category";
"Control.Apply" -> "Type.Proxy";
"Control.Biapplicative" -> "Control.Biapply";
"Control.Biapplicative" -> "Data.Tuple";
"Control.Biapply" -> "Data.Function";
"Control.Biapply" -> "Data.Bifunctor";
"Control.Biapply" -> "Data.Tuple";
"Control.Bind" -> "Control.Applicative";
"Control.Bind" -> "Control.Apply";
"Control.Bind" -> "Control.Category";
"Control.Bind" -> "Data.Function";
"Control.Bind" -> "Data.Functor";
"Control.Bind" -> "Data.Unit";
"Control.Bind" -> "Type.Proxy";
"Control.Category" -> "Control.Semigroupoid";
"Control.Comonad" -> "Control.Extend";
"Control.Comonad" -> "Data.Functor";
"Control.Comonad.Cofree" -> "Prelude";
"Control.Comonad.Cofree" -> "Control.Alternative";
"Control.Comonad.Cofree" -> "Control.Comonad";
"Control.Comonad.Cofree" -> "Control.Extend";
"Control.Comonad.Cofree" -> "Control.Lazy";
"Control.Comonad.Cofree" -> "Control.Monad.Free";
"Control.Comonad.Cofree" -> "Control.Monad.Rec.Class";
"Control.Comonad.Cofree" -> "Control.Monad.State";
"Control.Comonad.Cofree" -> "Data.Eq";
"Control.Comonad.Cofree" -> "Data.FoldableWithIndex";
"Control.Comonad.Cofree" -> "Data.FunctorWithIndex";
"Control.Comonad.Cofree" -> "Data.Foldable";
"Control.Comonad.Cofree" -> "Data.Lazy";
"Control.Comonad.Cofree" -> "Data.Ord";
"Control.Comonad.Cofree" -> "Data.Traversable";
"Control.Comonad.Cofree" -> "Data.TraversableWithIndex";
"Control.Comonad.Cofree" -> "Data.Tuple";
"Control.Comonad.Cofree.Class" -> "Prelude";
"Control.Comonad.Cofree.Class" -> "Control.Comonad";
"Control.Comonad.Cofree.Class" -> "Control.Comonad.Cofree";
"Control.Comonad.Cofree.Class" -> "Control.Comonad.Env.Trans";
"Control.Comonad.Cofree.Class" -> "Control.Comonad.Store.Trans";
"Control.Comonad.Cofree.Class" -> "Control.Comonad.Traced.Trans";
"Control.Comonad.Cofree.Class" -> "Data.Tuple";
"Control.Comonad.Env" -> "Prelude";
"Control.Comonad.Env" -> "Control.Comonad.Env.Class";
"Control.Comonad.Env" -> "Control.Comonad.Env.Trans";
"Control.Comonad.Env" -> "Data.Identity";
"Control.Comonad.Env" -> "Data.Newtype";
"Control.Comonad.Env" -> "Data.Tuple";
"Control.Comonad.Env.Class" -> "Prelude";
"Control.Comonad.Env.Class" -> "Control.Comonad";
"Control.Comonad.Env.Class" -> "Control.Comonad.Env.Trans";
"Control.Comonad.Env.Class" -> "Control.Comonad.Store";
"Control.Comonad.Env.Class" -> "Control.Comonad.Traced.Trans";
"Control.Comonad.Env.Class" -> "Control.Comonad.Trans.Class";
"Control.Comonad.Env.Class" -> "Data.Tuple";
"Control.Comonad.Env.Trans" -> "Prelude";
"Control.Comonad.Env.Trans" -> "Control.Comonad";
"Control.Comonad.Env.Trans" -> "Control.Comonad.Trans.Class";
"Control.Comonad.Env.Trans" -> "Control.Extend";
"Control.Comonad.Env.Trans" -> "Data.FoldableWithIndex";
"Control.Comonad.Env.Trans" -> "Data.FunctorWithIndex";
"Control.Comonad.Env.Trans" -> "Data.Traversable";
"Control.Comonad.Env.Trans" -> "Data.TraversableWithIndex";
"Control.Comonad.Env.Trans" -> "Data.Tuple";
"Control.Comonad.Env.Trans" -> "Data.Newtype";
"Control.Comonad.Store" -> "Prelude";
"Control.Comonad.Store" -> "Control.Comonad.Store.Class";
"Control.Comonad.Store" -> "Control.Comonad.Store.Trans";
"Control.Comonad.Store" -> "Data.Identity";
"Control.Comonad.Store" -> "Data.Newtype";
"Control.Comonad.Store" -> "Data.Tuple";
"Control.Comonad.Store.Class" -> "Prelude";
"Control.Comonad.Store.Class" -> "Control.Comonad";
"Control.Comonad.Store.Class" -> "Control.Comonad.Env.Trans";
"Control.Comonad.Store.Class" -> "Control.Comonad.Store.Trans";
"Control.Comonad.Store.Class" -> "Control.Comonad.Traced.Trans";
"Control.Comonad.Store.Class" -> "Control.Comonad.Trans.Class";
"Control.Comonad.Store.Class" -> "Control.Extend";
"Control.Comonad.Store.Class" -> "Data.Tuple";
"Control.Comonad.Store.Trans" -> "Prelude";
"Control.Comonad.Store.Trans" -> "Control.Comonad";
"Control.Comonad.Store.Trans" -> "Control.Comonad.Trans.Class";
"Control.Comonad.Store.Trans" -> "Control.Extend";
"Control.Comonad.Store.Trans" -> "Data.Tuple";
"Control.Comonad.Store.Trans" -> "Data.Newtype";
"Control.Comonad.Traced" -> "Prelude";
"Control.Comonad.Traced" -> "Control.Comonad.Traced.Class";
"Control.Comonad.Traced" -> "Control.Comonad.Traced.Trans";
"Control.Comonad.Traced" -> "Data.Identity";
"Control.Comonad.Traced" -> "Data.Newtype";
"Control.Comonad.Traced.Class" -> "Prelude";
"Control.Comonad.Traced.Class" -> "Control.Comonad";
"Control.Comonad.Traced.Class" -> "Control.Comonad.Env";
"Control.Comonad.Traced.Class" -> "Control.Comonad.Store";
"Control.Comonad.Traced.Class" -> "Control.Comonad.Traced.Trans";
"Control.Comonad.Traced.Class" -> "Control.Comonad.Trans.Class";
"Control.Comonad.Traced.Class" -> "Control.Monad.Identity.Trans";
"Control.Comonad.Traced.Class" -> "Data.Tuple";
"Control.Comonad.Traced.Trans" -> "Prelude";
"Control.Comonad.Traced.Trans" -> "Control.Comonad";
"Control.Comonad.Traced.Trans" -> "Control.Comonad.Trans.Class";
"Control.Comonad.Traced.Trans" -> "Control.Extend";
"Control.Comonad.Traced.Trans" -> "Data.Newtype";
"Control.Comonad.Trans.Class" -> "Control.Comonad";
"Control.Comonad.Trans.Class" -> "Control.Monad.Identity.Trans";
"Control.Extend" -> "Control.Category";
"Control.Extend" -> "Data.Functor";
"Control.Extend" -> "Data.Semigroup";
"Control.Lazy" -> "Data.Unit";
"Control.Monad" -> "Control.Applicative";
"Control.Monad" -> "Control.Apply";
"Control.Monad" -> "Control.Bind";
"Control.Monad" -> "Data.Functor";
"Control.Monad" -> "Data.Unit";
"Control.Monad" -> "Type.Proxy";
"Control.Monad.Cont" -> "Prelude";
"Control.Monad.Cont" -> "Control.Monad.Cont.Class";
"Control.Monad.Cont" -> "Control.Monad.Cont.Trans";
"Control.Monad.Cont" -> "Data.Identity";
"Control.Monad.Cont" -> "Data.Newtype";
"Control.Monad.Cont.Class" -> "Prelude";
"Control.Monad.Cont.Trans" -> "Prelude";
"Control.Monad.Cont.Trans" -> "Control.Apply";
"Control.Monad.Cont.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.Cont.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.Cont.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.Cont.Trans" -> "Control.Monad.State.Class";
"Control.Monad.Cont.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.Cont.Trans" -> "Data.Newtype";
"Control.Monad.Cont.Trans" -> "Effect.Class";
"Control.Monad.Error.Class" -> "Prelude";
"Control.Monad.Error.Class" -> "Data.Either";
"Control.Monad.Error.Class" -> "Data.Maybe";
"Control.Monad.Error.Class" -> "Effect";
"Control.Monad.Error.Class" -> "Effect.Exception";
"Control.Monad.Except" -> "Prelude";
"Control.Monad.Except" -> "Control.Monad.Error.Class";
"Control.Monad.Except" -> "Control.Monad.Except.Trans";
"Control.Monad.Except" -> "Data.Either";
"Control.Monad.Except" -> "Data.Identity";
"Control.Monad.Except" -> "Data.Newtype";
"Control.Monad.Except.Trans" -> "Prelude";
"Control.Monad.Except.Trans" -> "Control.Alt";
"Control.Monad.Except.Trans" -> "Control.Alternative";
"Control.Monad.Except.Trans" -> "Control.Apply";
"Control.Monad.Except.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.State.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.Except.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.Except.Trans" -> "Control.MonadPlus";
"Control.Monad.Except.Trans" -> "Control.Plus";
"Control.Monad.Except.Trans" -> "Data.Either";
"Control.Monad.Except.Trans" -> "Data.Newtype";
"Control.Monad.Except.Trans" -> "Data.Tuple";
"Control.Monad.Except.Trans" -> "Effect.Class";
"Control.Monad.Fork.Class" -> "Prelude";
"Control.Monad.Fork.Class" -> "Effect.Aff";
"Control.Monad.Fork.Class" -> "Control.Monad.Error.Class";
"Control.Monad.Fork.Class" -> "Control.Monad.Reader.Trans";
"Control.Monad.Fork.Class" -> "Control.Monad.Trans.Class";
"Control.Monad.Free" -> "Prelude";
"Control.Monad.Free" -> "Control.Apply";
"Control.Monad.Free" -> "Control.Monad.Rec.Class";
"Control.Monad.Free" -> "Control.Monad.Trans.Class";
"Control.Monad.Free" -> "Data.CatList";
"Control.Monad.Free" -> "Data.Either";
"Control.Monad.Free" -> "Data.Eq";
"Control.Monad.Free" -> "Data.Foldable";
"Control.Monad.Free" -> "Data.Maybe";
"Control.Monad.Free" -> "Data.Ord";
"Control.Monad.Free" -> "Data.Traversable";
"Control.Monad.Free" -> "Data.Tuple";
"Control.Monad.Free" -> "Unsafe.Coerce";
"Control.Monad.Free.Class" -> "Prelude";
"Control.Monad.Free.Class" -> "Control.Monad.Except.Trans";
"Control.Monad.Free.Class" -> "Control.Monad.Free";
"Control.Monad.Free.Class" -> "Control.Monad.Maybe.Trans";
"Control.Monad.Free.Class" -> "Control.Monad.Reader.Trans";
"Control.Monad.Free.Class" -> "Control.Monad.State.Trans";
"Control.Monad.Free.Class" -> "Control.Monad.Writer.Trans";
"Control.Monad.Gen" -> "Prelude";
"Control.Monad.Gen" -> "Control.Monad.Gen.Class";
"Control.Monad.Gen" -> "Control.Monad.Rec.Class";
"Control.Monad.Gen" -> "Data.Foldable";
"Control.Monad.Gen" -> "Data.Maybe";
"Control.Monad.Gen" -> "Data.Monoid.Additive";
"Control.Monad.Gen" -> "Data.Newtype";
"Control.Monad.Gen" -> "Data.Semigroup.Foldable";
"Control.Monad.Gen" -> "Data.Semigroup.Last";
"Control.Monad.Gen" -> "Data.Tuple";
"Control.Monad.Gen" -> "Data.Unfoldable";
"Control.Monad.Gen.Class" -> "Prelude";
"Control.Monad.Gen.Common" -> "Prelude";
"Control.Monad.Gen.Common" -> "Control.Apply";
"Control.Monad.Gen.Common" -> "Control.Monad.Gen";
"Control.Monad.Gen.Common" -> "Control.Monad.Rec.Class";
"Control.Monad.Gen.Common" -> "Data.Either";
"Control.Monad.Gen.Common" -> "Data.Identity";
"Control.Monad.Gen.Common" -> "Data.Maybe";
"Control.Monad.Gen.Common" -> "Data.NonEmpty";
"Control.Monad.Gen.Common" -> "Data.Tuple";
"Control.Monad.Gen.Common" -> "Data.Unfoldable";
"Control.Monad.Identity.Trans" -> "Prelude";
"Control.Monad.Identity.Trans" -> "Control.Alt";
"Control.Monad.Identity.Trans" -> "Control.Alternative";
"Control.Monad.Identity.Trans" -> "Control.Comonad";
"Control.Monad.Identity.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.State.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.Identity.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.Identity.Trans" -> "Control.MonadPlus";
"Control.Monad.Identity.Trans" -> "Control.Plus";
"Control.Monad.Identity.Trans" -> "Data.Eq";
"Control.Monad.Identity.Trans" -> "Data.Foldable";
"Control.Monad.Identity.Trans" -> "Data.Newtype";
"Control.Monad.Identity.Trans" -> "Data.Ord";
"Control.Monad.Identity.Trans" -> "Data.Traversable";
"Control.Monad.Identity.Trans" -> "Effect.Class";
"Control.Monad.List.Trans" -> "Prelude";
"Control.Monad.List.Trans" -> "Control.Alt";
"Control.Monad.List.Trans" -> "Control.Alternative";
"Control.Monad.List.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.List.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.List.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.List.Trans" -> "Control.MonadPlus";
"Control.Monad.List.Trans" -> "Control.Plus";
"Control.Monad.List.Trans" -> "Data.Lazy";
"Control.Monad.List.Trans" -> "Data.Maybe";
"Control.Monad.List.Trans" -> "Data.Newtype";
"Control.Monad.List.Trans" -> "Data.Tuple";
"Control.Monad.List.Trans" -> "Data.Unfoldable";
"Control.Monad.List.Trans" -> "Data.Unfoldable1";
"Control.Monad.List.Trans" -> "Effect.Class";
"Control.Monad.Maybe.Trans" -> "Prelude";
"Control.Monad.Maybe.Trans" -> "Control.Alt";
"Control.Monad.Maybe.Trans" -> "Control.Alternative";
"Control.Monad.Maybe.Trans" -> "Control.Apply";
"Control.Monad.Maybe.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.State.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.Maybe.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.Maybe.Trans" -> "Control.MonadPlus";
"Control.Monad.Maybe.Trans" -> "Control.Plus";
"Control.Monad.Maybe.Trans" -> "Data.Maybe";
"Control.Monad.Maybe.Trans" -> "Data.Newtype";
"Control.Monad.Maybe.Trans" -> "Data.Tuple";
"Control.Monad.Maybe.Trans" -> "Effect.Class";
"Control.Monad.Morph" -> "Prelude";
"Control.Monad.Morph" -> "Control.Comonad.Cofree";
"Control.Monad.Morph" -> "Control.Comonad.Env.Trans";
"Control.Monad.Morph" -> "Control.Comonad.Store";
"Control.Monad.Morph" -> "Control.Comonad.Traced";
"Control.Monad.Morph" -> "Control.Monad.Except.Trans";
"Control.Monad.Morph" -> "Control.Monad.Free";
"Control.Monad.Morph" -> "Control.Monad.Maybe.Trans";
"Control.Monad.Morph" -> "Control.Monad.RWS.Trans";
"Control.Monad.Morph" -> "Control.Monad.Reader.Trans";
"Control.Monad.Morph" -> "Control.Monad.State.Trans";
"Control.Monad.Morph" -> "Control.Monad.Trans.Class";
"Control.Monad.Morph" -> "Control.Monad.Writer.Trans";
"Control.Monad.Morph" -> "Data.Bifunctor";
"Control.Monad.Morph" -> "Data.Coyoneda";
"Control.Monad.Morph" -> "Data.Either";
"Control.Monad.Morph" -> "Data.Functor.Compose";
"Control.Monad.Morph" -> "Data.Functor.Product";
"Control.Monad.Morph" -> "Data.Identity";
"Control.Monad.Morph" -> "Data.Maybe";
"Control.Monad.Morph" -> "Data.Newtype";
"Control.Monad.Morph" -> "Data.Tuple";
"Control.Monad.Morph" -> "Data.Yoneda";
"Control.Monad.RWS" -> "Prelude";
"Control.Monad.RWS" -> "Control.Monad.Reader.Class";
"Control.Monad.RWS" -> "Control.Monad.RWS.Trans";
"Control.Monad.RWS" -> "Control.Monad.State.Class";
"Control.Monad.RWS" -> "Control.Monad.Trans.Class";
"Control.Monad.RWS" -> "Control.Monad.Writer.Class";
"Control.Monad.RWS" -> "Data.Identity";
"Control.Monad.RWS" -> "Data.Newtype";
"Control.Monad.RWS" -> "Data.Tuple";
"Control.Monad.RWS.Trans" -> "Prelude";
"Control.Monad.RWS.Trans" -> "Control.Alt";
"Control.Monad.RWS.Trans" -> "Control.Alternative";
"Control.Monad.RWS.Trans" -> "Control.Apply";
"Control.Monad.RWS.Trans" -> "Control.Lazy";
"Control.Monad.RWS.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.RWS.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.RWS.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.RWS.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.RWS.Trans" -> "Control.Monad.State.Class";
"Control.Monad.RWS.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.RWS.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.RWS.Trans" -> "Control.Plus";
"Control.Monad.RWS.Trans" -> "Data.Newtype";
"Control.Monad.RWS.Trans" -> "Data.Tuple";
"Control.Monad.RWS.Trans" -> "Effect.Class";
"Control.Monad.Reader" -> "Prelude";
"Control.Monad.Reader" -> "Control.Monad.Reader.Class";
"Control.Monad.Reader" -> "Control.Monad.Reader.Trans";
"Control.Monad.Reader" -> "Data.Identity";
"Control.Monad.Reader" -> "Data.Newtype";
"Control.Monad.Reader.Class" -> "Prelude";
"Control.Monad.Reader.Trans" -> "Prelude";
"Control.Monad.Reader.Trans" -> "Control.Alt";
"Control.Monad.Reader.Trans" -> "Control.Alternative";
"Control.Monad.Reader.Trans" -> "Control.Apply";
"Control.Monad.Reader.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.State.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.Reader.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.Reader.Trans" -> "Control.MonadPlus";
"Control.Monad.Reader.Trans" -> "Control.Plus";
"Control.Monad.Reader.Trans" -> "Data.Distributive";
"Control.Monad.Reader.Trans" -> "Data.Newtype";
"Control.Monad.Reader.Trans" -> "Effect.Class";
"Control.Monad.Rec.Class" -> "Prelude";
"Control.Monad.Rec.Class" -> "Data.Bifunctor";
"Control.Monad.Rec.Class" -> "Data.Either";
"Control.Monad.Rec.Class" -> "Data.Identity";
"Control.Monad.Rec.Class" -> "Data.Maybe";
"Control.Monad.Rec.Class" -> "Effect";
"Control.Monad.Rec.Class" -> "Effect.Ref";
"Control.Monad.Rec.Class" -> "Partial.Unsafe";
"Control.Monad.ST" -> "Control.Monad.ST.Internal";
"Control.Monad.ST.Class" -> "Prelude";
"Control.Monad.ST.Class" -> "Control.Monad.ST";
"Control.Monad.ST.Class" -> "Control.Monad.ST.Global";
"Control.Monad.ST.Class" -> "Control.Monad.ST.Global";
"Control.Monad.ST.Class" -> "Effect";
"Control.Monad.ST.Global" -> "Prelude";
"Control.Monad.ST.Global" -> "Control.Monad.ST";
"Control.Monad.ST.Global" -> "Effect";
"Control.Monad.ST.Global" -> "Unsafe.Coerce";
"Control.Monad.ST.Internal" -> "Prelude";
"Control.Monad.ST.Internal" -> "Control.Apply";
"Control.Monad.ST.Internal" -> "Control.Monad.Rec.Class";
"Control.Monad.ST.Internal" -> "Partial.Unsafe";
"Control.Monad.ST.Ref" -> "Control.Monad.ST.Internal";
"Control.Monad.ST.Uncurried" -> "Control.Monad.ST.Internal";
"Control.Monad.State" -> "Prelude";
"Control.Monad.State" -> "Control.Monad.State.Class";
"Control.Monad.State" -> "Control.Monad.State.Trans";
"Control.Monad.State" -> "Data.Identity";
"Control.Monad.State" -> "Data.Newtype";
"Control.Monad.State" -> "Data.Tuple";
"Control.Monad.State.Class" -> "Prelude";
"Control.Monad.State.Class" -> "Data.Tuple";
"Control.Monad.State.Trans" -> "Prelude";
"Control.Monad.State.Trans" -> "Control.Alt";
"Control.Monad.State.Trans" -> "Control.Alternative";
"Control.Monad.State.Trans" -> "Control.Apply";
"Control.Monad.State.Trans" -> "Control.Lazy";
"Control.Monad.State.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.State.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.State.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.State.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.State.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.State.Trans" -> "Control.Monad.State.Class";
"Control.Monad.State.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.State.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.State.Trans" -> "Control.MonadPlus";
"Control.Monad.State.Trans" -> "Control.Plus";
"Control.Monad.State.Trans" -> "Data.Newtype";
"Control.Monad.State.Trans" -> "Data.Tuple";
"Control.Monad.State.Trans" -> "Effect.Class";
"Control.Monad.Trampoline" -> "Prelude";
"Control.Monad.Trampoline" -> "Control.Monad.Free";
"Control.Monad.Trans.Class" -> "Prelude";
"Control.Monad.Writer" -> "Prelude";
"Control.Monad.Writer" -> "Control.Monad.Writer.Class";
"Control.Monad.Writer" -> "Control.Monad.Writer.Trans";
"Control.Monad.Writer" -> "Data.Identity";
"Control.Monad.Writer" -> "Data.Newtype";
"Control.Monad.Writer" -> "Data.Tuple";
"Control.Monad.Writer.Class" -> "Prelude";
"Control.Monad.Writer.Class" -> "Data.Tuple";
"Control.Monad.Writer.Trans" -> "Prelude";
"Control.Monad.Writer.Trans" -> "Control.Alt";
"Control.Monad.Writer.Trans" -> "Control.Alternative";
"Control.Monad.Writer.Trans" -> "Control.Apply";
"Control.Monad.Writer.Trans" -> "Control.Monad.Cont.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.Error.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.Reader.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.Rec.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.ST.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.State.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.Trans.Class";
"Control.Monad.Writer.Trans" -> "Control.Monad.Writer.Class";
"Control.Monad.Writer.Trans" -> "Control.MonadPlus";
"Control.Monad.Writer.Trans" -> "Control.Plus";
"Control.Monad.Writer.Trans" -> "Data.Newtype";
"Control.Monad.Writer.Trans" -> "Data.Tuple";
"Control.Monad.Writer.Trans" -> "Effect.Class";
"Control.MonadPlus" -> "Control.Alt";
"Control.MonadPlus" -> "Control.Alternative";
"Control.MonadPlus" -> "Control.Applicative";
"Control.MonadPlus" -> "Control.Apply";
"Control.MonadPlus" -> "Control.Bind";
"Control.MonadPlus" -> "Control.Monad";
"Control.MonadPlus" -> "Control.Plus";
"Control.MonadPlus" -> "Data.Functor";
"Control.Parallel" -> "Prelude";
"Control.Parallel" -> "Control.Alternative";
"Control.Parallel" -> "Control.Parallel.Class";
"Control.Parallel" -> "Data.Foldable";
"Control.Parallel" -> "Data.Traversable";
"Control.Parallel.Class" -> "Prelude";
"Control.Parallel.Class" -> "Control.Alt";
"Control.Parallel.Class" -> "Control.Alternative";
"Control.Parallel.Class" -> "Control.Monad.Cont.Trans";
"Control.Parallel.Class" -> "Control.Monad.Except.Trans";
"Control.Parallel.Class" -> "Control.Monad.Maybe.Trans";
"Control.Parallel.Class" -> "Control.Monad.Reader.Trans";
"Control.Parallel.Class" -> "Control.Monad.Writer.Trans";
"Control.Parallel.Class" -> "Control.Plus";
"Control.Parallel.Class" -> "Data.Either";
"Control.Parallel.Class" -> "Data.Functor.Compose";
"Control.Parallel.Class" -> "Data.Functor.Costar";
"Control.Parallel.Class" -> "Data.Maybe";
"Control.Parallel.Class" -> "Data.Newtype";
"Control.Parallel.Class" -> "Data.Profunctor.Star";
"Control.Parallel.Class" -> "Effect.Class";
"Control.Parallel.Class" -> "Effect.Ref";
"Control.Plus" -> "Control.Alt";
"Control.Plus" -> "Data.Functor";
"Data.Argonaut.Core" -> "Prelude";
"Data.Argonaut.Core" -> "Data.Function.Uncurried";
"Data.Argonaut.Core" -> "Data.Maybe";
"Data.Argonaut.Core" -> "Foreign.Object";
"Data.Argonaut.Core" -> "Foreign.Object";
"Data.Argonaut.Decode" -> "Prelude";
"Data.Argonaut.Decode" -> "Data.Argonaut.Decode.Class";
"Data.Argonaut.Decode" -> "Data.Argonaut.Decode.Combinators";
"Data.Argonaut.Decode" -> "Data.Argonaut.Decode.Error";
"Data.Argonaut.Decode" -> "Data.Argonaut.Decode.Parser";
"Data.Argonaut.Decode" -> "Data.Either";
"Data.Argonaut.Decode.Class" -> "Data.Argonaut.Decode.Decoders";
"Data.Argonaut.Decode.Class" -> "Data.Argonaut.Core";
"Data.Argonaut.Decode.Class" -> "Data.Argonaut.Decode.Error";
"Data.Argonaut.Decode.Class" -> "Data.Array.NonEmpty";
"Data.Argonaut.Decode.Class" -> "Data.Bifunctor";
"Data.Argonaut.Decode.Class" -> "Data.Either";
"Data.Argonaut.Decode.Class" -> "Data.Identity";
"Data.Argonaut.Decode.Class" -> "Data.List";
"Data.Argonaut.Decode.Class" -> "Data.List.NonEmpty";
"Data.Argonaut.Decode.Class" -> "Data.String.NonEmpty";
"Data.Argonaut.Decode.Class" -> "Data.Map";
"Data.Argonaut.Decode.Class" -> "Data.Maybe";
"Data.Argonaut.Decode.Class" -> "Data.NonEmpty";
"Data.Argonaut.Decode.Class" -> "Data.Set";
"Data.Argonaut.Decode.Class" -> "Data.String";
"Data.Argonaut.Decode.Class" -> "Data.Symbol";
"Data.Argonaut.Decode.Class" -> "Data.Tuple";
"Data.Argonaut.Decode.Class" -> "Foreign.Object";
"Data.Argonaut.Decode.Class" -> "Prelude";
"Data.Argonaut.Decode.Class" -> "Record";
"Data.Argonaut.Decode.Class" -> "Type.Proxy";
"Data.Argonaut.Decode.Combinators" -> "Prelude";
"Data.Argonaut.Decode.Combinators" -> "Data.Argonaut.Core";
"Data.Argonaut.Decode.Combinators" -> "Data.Argonaut.Decode.Error";
"Data.Argonaut.Decode.Combinators" -> "Data.Argonaut.Decode.Class";
"Data.Argonaut.Decode.Combinators" -> "Data.Either";
"Data.Argonaut.Decode.Combinators" -> "Data.Maybe";
"Data.Argonaut.Decode.Combinators" -> "Foreign.Object";
"Data.Argonaut.Decode.Combinators" -> "Data.Argonaut.Decode.Decoders";
"Data.Argonaut.Decode.Decoders" -> "Prelude";
"Data.Argonaut.Decode.Decoders" -> "Data.Argonaut.Core";
"Data.Argonaut.Decode.Decoders" -> "Data.Argonaut.Decode.Error";
"Data.Argonaut.Decode.Decoders" -> "Data.Array";
"Data.Argonaut.Decode.Decoders" -> "Data.Array.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.Array.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.Bifunctor";
"Data.Argonaut.Decode.Decoders" -> "Data.Either";
"Data.Argonaut.Decode.Decoders" -> "Data.Identity";
"Data.Argonaut.Decode.Decoders" -> "Data.Int";
"Data.Argonaut.Decode.Decoders" -> "Data.List";
"Data.Argonaut.Decode.Decoders" -> "Data.List";
"Data.Argonaut.Decode.Decoders" -> "Data.List.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.List.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.String.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.String.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.Map";
"Data.Argonaut.Decode.Decoders" -> "Data.Maybe";
"Data.Argonaut.Decode.Decoders" -> "Data.NonEmpty";
"Data.Argonaut.Decode.Decoders" -> "Data.Set";
"Data.Argonaut.Decode.Decoders" -> "Data.String";
"Data.Argonaut.Decode.Decoders" -> "Data.Traversable";
"Data.Argonaut.Decode.Decoders" -> "Data.TraversableWithIndex";
"Data.Argonaut.Decode.Decoders" -> "Data.Tuple";
"Data.Argonaut.Decode.Decoders" -> "Foreign.Object";
"Data.Argonaut.Decode.Error" -> "Prelude";
"Data.Argonaut.Decode.Error" -> "Data.Argonaut.Core";
"Data.Argonaut.Decode.Error" -> "Data.Generic.Rep";
"Data.Argonaut.Decode.Parser" -> "Prelude";
"Data.Argonaut.Decode.Parser" -> "Data.Argonaut.Core";
"Data.Argonaut.Decode.Parser" -> "Data.Argonaut.Decode.Error";
"Data.Argonaut.Decode.Parser" -> "Data.Argonaut.Parser";
"Data.Argonaut.Decode.Parser" -> "Data.Bifunctor";
"Data.Argonaut.Decode.Parser" -> "Data.Either";
"Data.Argonaut.Encode" -> "Prelude";
"Data.Argonaut.Encode" -> "Data.Argonaut.Core";
"Data.Argonaut.Encode" -> "Data.Argonaut.Encode.Class";
"Data.Argonaut.Encode" -> "Data.Argonaut.Encode.Combinators";
"Data.Argonaut.Encode.Class" -> "Data.Argonaut.Encode.Encoders";
"Data.Argonaut.Encode.Class" -> "Data.Argonaut.Core";
"Data.Argonaut.Encode.Class" -> "Data.Array.NonEmpty";
"Data.Argonaut.Encode.Class" -> "Data.String.NonEmpty";
"Data.Argonaut.Encode.Class" -> "Data.Either";
"Data.Argonaut.Encode.Class" -> "Data.Identity";
"Data.Argonaut.Encode.Class" -> "Data.List";
"Data.Argonaut.Encode.Class" -> "Data.List.Types";
"Data.Argonaut.Encode.Class" -> "Data.Map";
"Data.Argonaut.Encode.Class" -> "Data.Maybe";
"Data.Argonaut.Encode.Class" -> "Data.NonEmpty";
"Data.Argonaut.Encode.Class" -> "Data.Set";
"Data.Argonaut.Encode.Class" -> "Data.String";
"Data.Argonaut.Encode.Class" -> "Data.Symbol";
"Data.Argonaut.Encode.Class" -> "Data.Tuple";
"Data.Argonaut.Encode.Class" -> "Foreign.Object";
"Data.Argonaut.Encode.Class" -> "Prelude";
"Data.Argonaut.Encode.Class" -> "Record";
"Data.Argonaut.Encode.Class" -> "Type.Proxy";
"Data.Argonaut.Encode.Combinators" -> "Data.Argonaut.Core";
"Data.Argonaut.Encode.Combinators" -> "Data.Argonaut.Encode.Class";
"Data.Argonaut.Encode.Combinators" -> "Data.Maybe";
"Data.Argonaut.Encode.Combinators" -> "Data.Tuple";
"Data.Argonaut.Encode.Combinators" -> "Data.Argonaut.Encode.Encoders";
"Data.Argonaut.Encode.Encoders" -> "Prelude";
"Data.Argonaut.Encode.Encoders" -> "Data.Argonaut.Core";
"Data.Argonaut.Encode.Encoders" -> "Data.Array";
"Data.Argonaut.Encode.Encoders" -> "Data.Array.NonEmpty";
"Data.Argonaut.Encode.Encoders" -> "Data.Array.NonEmpty";
"Data.Argonaut.Encode.Encoders" -> "Data.Either";
"Data.Argonaut.Encode.Encoders" -> "Data.Identity";
"Data.Argonaut.Encode.Encoders" -> "Data.Int";
"Data.Argonaut.Encode.Encoders" -> "Data.List";
"Data.Argonaut.Encode.Encoders" -> "Data.List.NonEmpty";
"Data.Argonaut.Encode.Encoders" -> "Data.List.Types";
"Data.Argonaut.Encode.Encoders" -> "Data.String.NonEmpty";
"Data.Argonaut.Encode.Encoders" -> "Data.String.NonEmpty";
"Data.Argonaut.Encode.Encoders" -> "Data.Map";
"Data.Argonaut.Encode.Encoders" -> "Data.Maybe";
"Data.Argonaut.Encode.Encoders" -> "Data.NonEmpty";
"Data.Argonaut.Encode.Encoders" -> "Data.Set";
"Data.Argonaut.Encode.Encoders" -> "Data.String";
"Data.Argonaut.Encode.Encoders" -> "Data.String.CodePoints";
"Data.Argonaut.Encode.Encoders" -> "Data.String.CodeUnits";
"Data.Argonaut.Encode.Encoders" -> "Data.Tuple";
"Data.Argonaut.Encode.Encoders" -> "Foreign.Object";
"Data.Argonaut.Gen" -> "Prelude";
"Data.Argonaut.Gen" -> "Control.Lazy";
"Data.Argonaut.Gen" -> "Control.Monad.Gen";
"Data.Argonaut.Gen" -> "Control.Monad.Gen";
"Data.Argonaut.Gen" -> "Control.Monad.Rec.Class";
"Data.Argonaut.Gen" -> "Data.Argonaut.Core";
"Data.Argonaut.Gen" -> "Data.Array";
"Data.Argonaut.Gen" -> "Data.NonEmpty";
"Data.Argonaut.Gen" -> "Data.String.Gen";
"Data.Argonaut.Gen" -> "Foreign.Object";
"Data.Argonaut.Parser" -> "Data.Argonaut.Core";
"Data.Argonaut.Parser" -> "Data.Either";
"Data.Argonaut.Parser" -> "Data.Function.Uncurried";
"Data.Array" -> "Prelude";
"Data.Array" -> "Control.Alt";
"Data.Array" -> "Control.Alternative";
"Data.Array" -> "Control.Lazy";
"Data.Array" -> "Control.Monad.Rec.Class";
"Data.Array" -> "Control.Monad.ST";
"Data.Array" -> "Data.Array.NonEmpty.Internal";
"Data.Array" -> "Data.Array.ST";
"Data.Array" -> "Data.Array.ST.Iterator";
"Data.Array" -> "Data.Foldable";
"Data.Array" -> "Data.Foldable";
"Data.Array" -> "Data.Function.Uncurried";
"Data.Array" -> "Data.FunctorWithIndex";
"Data.Array" -> "Data.Maybe";
"Data.Array" -> "Data.Traversable";
"Data.Array" -> "Data.Tuple";
"Data.Array" -> "Data.Unfoldable";
"Data.Array" -> "Partial.Unsafe";
"Data.Array.NonEmpty" -> "Prelude";
"Data.Array.NonEmpty" -> "Control.Alternative";
"Data.Array.NonEmpty" -> "Control.Lazy";
"Data.Array.NonEmpty" -> "Control.Monad.Rec.Class";
"Data.Array.NonEmpty" -> "Data.Array";
"Data.Array.NonEmpty" -> "Data.Array.NonEmpty.Internal";
"Data.Array.NonEmpty" -> "Data.Array.NonEmpty.Internal";
"Data.Array.NonEmpty" -> "Data.Bifunctor";
"Data.Array.NonEmpty" -> "Data.Foldable";
"Data.Array.NonEmpty" -> "Data.Maybe";
"Data.Array.NonEmpty" -> "Data.NonEmpty";
"Data.Array.NonEmpty" -> "Data.Semigroup.Foldable";
"Data.Array.NonEmpty" -> "Data.Semigroup.Foldable";
"Data.Array.NonEmpty" -> "Data.Tuple";
"Data.Array.NonEmpty" -> "Data.Unfoldable";
"Data.Array.NonEmpty" -> "Data.Unfoldable1";
"Data.Array.NonEmpty" -> "Partial.Unsafe";
"Data.Array.NonEmpty" -> "Safe.Coerce";
"Data.Array.NonEmpty" -> "Unsafe.Coerce";
"Data.Array.NonEmpty.Internal" -> "Prelude";
"Data.Array.NonEmpty.Internal" -> "Control.Alt";
"Data.Array.NonEmpty.Internal" -> "Data.Eq";
"Data.Array.NonEmpty.Internal" -> "Data.Foldable";
"Data.Array.NonEmpty.Internal" -> "Data.FoldableWithIndex";
"Data.Array.NonEmpty.Internal" -> "Data.Function.Uncurried";
"Data.Array.NonEmpty.Internal" -> "Data.FunctorWithIndex";
"Data.Array.NonEmpty.Internal" -> "Data.Ord";
"Data.Array.NonEmpty.Internal" -> "Data.Semigroup.Foldable";
"Data.Array.NonEmpty.Internal" -> "Data.Semigroup.Traversable";
"Data.Array.NonEmpty.Internal" -> "Data.Traversable";
"Data.Array.NonEmpty.Internal" -> "Data.TraversableWithIndex";
"Data.Array.NonEmpty.Internal" -> "Data.Unfoldable1";
"Data.Array.Partial" -> "Prelude";
"Data.Array.Partial" -> "Data.Array";
"Data.Array.ST" -> "Prelude";
"Data.Array.ST" -> "Control.Monad.ST";
"Data.Array.ST" -> "Control.Monad.ST";
"Data.Array.ST" -> "Control.Monad.ST.Uncurried";
"Data.Array.ST" -> "Data.Maybe";
"Data.Array.ST.Iterator" -> "Prelude";
"Data.Array.ST.Iterator" -> "Control.Monad.ST";
"Data.Array.ST.Iterator" -> "Control.Monad.ST";
"Data.Array.ST.Iterator" -> "Control.Monad.ST.Ref";
"Data.Array.ST.Iterator" -> "Control.Monad.ST.Ref";
"Data.Array.ST.Iterator" -> "Data.Array.ST";
"Data.Array.ST.Iterator" -> "Data.Array.ST";
"Data.Array.ST.Iterator" -> "Data.Maybe";
"Data.Array.ST.Partial" -> "Control.Monad.ST";
"Data.Array.ST.Partial" -> "Control.Monad.ST.Uncurried";
"Data.Array.ST.Partial" -> "Data.Array.ST";
"Data.Array.ST.Partial" -> "Data.Unit";
"Data.Bifoldable" -> "Prelude";
"Data.Bifoldable" -> "Control.Apply";
"Data.Bifoldable" -> "Data.Const";
"Data.Bifoldable" -> "Data.Either";
"Data.Bifoldable" -> "Data.Foldable";
"Data.Bifoldable" -> "Data.Functor.Clown";
"Data.Bifoldable" -> "Data.Functor.Flip";
"Data.Bifoldable" -> "Data.Functor.Joker";
"Data.Bifoldable" -> "Data.Functor.Product2";
"Data.Bifoldable" -> "Data.Monoid.Conj";
"Data.Bifoldable" -> "Data.Monoid.Disj";
"Data.Bifoldable" -> "Data.Monoid.Dual";
"Data.Bifoldable" -> "Data.Monoid.Endo";
"Data.Bifoldable" -> "Data.Newtype";
"Data.Bifoldable" -> "Data.Tuple";
"Data.Bifunctor" -> "Control.Category";
"Data.Bifunctor" -> "Data.Const";
"Data.Bifunctor" -> "Data.Either";
"Data.Bifunctor" -> "Data.Tuple";
"Data.Bifunctor.Join" -> "Prelude";
"Data.Bifunctor.Join" -> "Control.Biapplicative";
"Data.Bifunctor.Join" -> "Control.Biapply";
"Data.Bifunctor.Join" -> "Data.Bifunctor";
"Data.Bifunctor.Join" -> "Data.Newtype";
"Data.Bitraversable" -> "Prelude";
"Data.Bitraversable" -> "Data.Bifoldable";
"Data.Bitraversable" -> "Data.Traversable";
"Data.Bitraversable" -> "Data.Bifunctor";
"Data.Bitraversable" -> "Data.Const";
"Data.Bitraversable" -> "Data.Either";
"Data.Bitraversable" -> "Data.Functor.Clown";
"Data.Bitraversable" -> "Data.Functor.Flip";
"Data.Bitraversable" -> "Data.Functor.Joker";
"Data.Bitraversable" -> "Data.Functor.Product2";
"Data.Bitraversable" -> "Data.Tuple";
"Data.BooleanAlgebra" -> "Data.HeytingAlgebra";
"Data.BooleanAlgebra" -> "Data.Symbol";
"Data.BooleanAlgebra" -> "Data.Unit";
"Data.BooleanAlgebra" -> "Type.Proxy";
"Data.Bounded" -> "Data.Ord";
"Data.Bounded" -> "Data.Symbol";
"Data.Bounded" -> "Data.Unit";
"Data.Bounded" -> "Record.Unsafe";
"Data.Bounded" -> "Type.Proxy";
"Data.Bounded.Generic" -> "Data.Generic.Rep";
"Data.Bounded.Generic" -> "Data.Bounded";
"Data.CatList" -> "Prelude";
"Data.CatList" -> "Control.Alt";
"Data.CatList" -> "Control.Alternative";
"Data.CatList" -> "Control.MonadPlus";
"Data.CatList" -> "Control.Plus";
"Data.CatList" -> "Data.CatQueue";
"Data.CatList" -> "Data.Foldable";
"Data.CatList" -> "Data.Foldable";
"Data.CatList" -> "Data.List";
"Data.CatList" -> "Data.Maybe";
"Data.CatList" -> "Data.Traversable";
"Data.CatList" -> "Data.Tuple";
"Data.CatList" -> "Data.Unfoldable";
"Data.CatList" -> "Data.Unfoldable1";
"Data.CatQueue" -> "Prelude";
"Data.CatQueue" -> "Control.Alt";
"Data.CatQueue" -> "Control.Alternative";
"Data.CatQueue" -> "Control.Apply";
"Data.CatQueue" -> "Control.MonadPlus";
"Data.CatQueue" -> "Control.Plus";
"Data.CatQueue" -> "Data.Foldable";
"Data.CatQueue" -> "Data.List";
"Data.CatQueue" -> "Data.List";
"Data.CatQueue" -> "Data.Maybe";
"Data.CatQueue" -> "Data.Traversable";
"Data.CatQueue" -> "Data.Tuple";
"Data.CatQueue" -> "Data.Unfoldable";
"Data.Char" -> "Data.Enum";
"Data.Char" -> "Data.Maybe";
"Data.Char.Gen" -> "Prelude";
"Data.Char.Gen" -> "Control.Monad.Gen";
"Data.Char.Gen" -> "Data.Enum";
"Data.Char.Gen" -> "Data.NonEmpty";
"Data.CommutativeRing" -> "Data.Ring";
"Data.CommutativeRing" -> "Data.Semiring";
"Data.CommutativeRing" -> "Data.Symbol";
"Data.CommutativeRing" -> "Data.Unit";
"Data.CommutativeRing" -> "Type.Proxy";
"Data.Comparison" -> "Prelude";
"Data.Comparison" -> "Data.Function";
"Data.Comparison" -> "Data.Functor.Contravariant";
"Data.Comparison" -> "Data.Newtype";
"Data.Const" -> "Prelude";
"Data.Const" -> "Data.Eq";
"Data.Const" -> "Data.Functor.Invariant";
"Data.Const" -> "Data.Newtype";
"Data.Const" -> "Data.Ord";
"Data.Coyoneda" -> "Prelude";
"Data.Coyoneda" -> "Control.Alt";
"Data.Coyoneda" -> "Control.Alternative";
"Data.Coyoneda" -> "Control.Comonad";
"Data.Coyoneda" -> "Control.Extend";
"Data.Coyoneda" -> "Control.Monad.Trans.Class";
"Data.Coyoneda" -> "Control.MonadPlus";
"Data.Coyoneda" -> "Data.Distributive";
"Data.Coyoneda" -> "Data.Eq";
"Data.Coyoneda" -> "Data.Exists";
"Data.Coyoneda" -> "Data.Foldable";
"Data.Coyoneda" -> "Data.Functor.Invariant";
"Data.Coyoneda" -> "Data.Ord";
"Data.Coyoneda" -> "Data.Semigroup.Foldable";
"Data.Coyoneda" -> "Data.Semigroup.Traversable";
"Data.Coyoneda" -> "Data.Traversable";
"Data.Date" -> "Prelude";
"Data.Date" -> "Data.Date.Component";
"Data.Date" -> "Data.Enum";
"Data.Date" -> "Data.Function.Uncurried";
"Data.Date" -> "Data.Int";
"Data.Date" -> "Data.Maybe";
"Data.Date" -> "Data.Time.Duration";
"Data.Date" -> "Partial.Unsafe";
"Data.Date.Component" -> "Prelude";
"Data.Date.Component" -> "Data.Enum";
"Data.Date.Component" -> "Data.Maybe";
"Data.Date.Component.Gen" -> "Prelude";
"Data.Date.Component.Gen" -> "Control.Monad.Gen";
"Data.Date.Component.Gen" -> "Data.Date.Component";
"Data.Date.Component.Gen" -> "Data.Enum";
"Data.Date.Component.Gen" -> "Data.Enum.Gen";
"Data.Date.Component.Gen" -> "Data.Maybe";
"Data.Date.Component.Gen" -> "Partial.Unsafe";
"Data.Date.Gen" -> "Prelude";
"Data.Date.Gen" -> "Control.Monad.Gen";
"Data.Date.Gen" -> "Data.Date";
"Data.Date.Gen" -> "Data.Date.Component.Gen";
"Data.Date.Gen" -> "Data.Int";
"Data.Date.Gen" -> "Data.Maybe";
"Data.Date.Gen" -> "Data.Time.Duration";
"Data.Date.Gen" -> "Partial.Unsafe";
"Data.DateTime" -> "Prelude";
"Data.DateTime" -> "Data.Date";
"Data.DateTime" -> "Data.Enum";
"Data.DateTime" -> "Data.Function.Uncurried";
"Data.DateTime" -> "Data.Time";
"Data.DateTime" -> "Data.Time.Duration";
"Data.DateTime" -> "Data.Maybe";
"Data.DateTime.Gen" -> "Prelude";
"Data.DateTime.Gen" -> "Control.Monad.Gen";
"Data.DateTime.Gen" -> "Data.Date.Gen";
"Data.DateTime.Gen" -> "Data.DateTime";
"Data.DateTime.Gen" -> "Data.Time.Gen";
"Data.DateTime.Instant" -> "Prelude";
"Data.DateTime.Instant" -> "Data.DateTime";
"Data.DateTime.Instant" -> "Data.Enum";
"Data.DateTime.Instant" -> "Data.Function.Uncurried";
"Data.DateTime.Instant" -> "Data.Maybe";
"Data.DateTime.Instant" -> "Data.Time.Duration";
"Data.DateTime.Instant" -> "Partial.Unsafe";
"Data.Decidable" -> "Prelude";
"Data.Decidable" -> "Data.Comparison";
"Data.Decidable" -> "Data.Decide";
"Data.Decidable" -> "Data.Divisible";
"Data.Decidable" -> "Data.Equivalence";
"Data.Decidable" -> "Data.Op";
"Data.Decidable" -> "Data.Predicate";
"Data.Decide" -> "Prelude";
"Data.Decide" -> "Data.Comparison";
"Data.Decide" -> "Data.Divide";
"Data.Decide" -> "Data.Either";
"Data.Decide" -> "Data.Equivalence";
"Data.Decide" -> "Data.Op";
"Data.Decide" -> "Data.Predicate";
"Data.Distributive" -> "Prelude";
"Data.Distributive" -> "Data.Identity";
"Data.Distributive" -> "Data.Newtype";
"Data.Distributive" -> "Data.Tuple";
"Data.Distributive" -> "Type.Equality";
"Data.Divide" -> "Prelude";
"Data.Divide" -> "Data.Comparison";
"Data.Divide" -> "Data.Equivalence";
"Data.Divide" -> "Data.Functor.Contravariant";
"Data.Divide" -> "Data.Op";
"Data.Divide" -> "Data.Predicate";
"Data.Divide" -> "Data.Tuple";
"Data.Divisible" -> "Prelude";
"Data.Divisible" -> "Data.Comparison";
"Data.Divisible" -> "Data.Divide";
"Data.Divisible" -> "Data.Equivalence";
"Data.Divisible" -> "Data.Op";
"Data.Divisible" -> "Data.Predicate";
"Data.DivisionRing" -> "Data.EuclideanRing";
"Data.DivisionRing" -> "Data.Ring";
"Data.DivisionRing" -> "Data.Semiring";
"Data.Either" -> "Prelude";
"Data.Either" -> "Control.Alt";
"Data.Either" -> "Control.Extend";
"Data.Either" -> "Data.Eq";
"Data.Either" -> "Data.Functor.Invariant";
"Data.Either" -> "Data.Generic.Rep";
"Data.Either" -> "Data.Maybe";
"Data.Either" -> "Data.Ord";
"Data.Either.Inject" -> "Prelude";
"Data.Either.Inject" -> "Data.Either";
"Data.Either.Inject" -> "Data.Maybe";
"Data.Either.Nested" -> "Data.Either";
"Data.Either.Nested" -> "Data.Void";
"Data.Enum" -> "Prelude";
"Data.Enum" -> "Control.MonadPlus";
"Data.Enum" -> "Data.Either";
"Data.Enum" -> "Data.Maybe";
"Data.Enum" -> "Data.Newtype";
"Data.Enum" -> "Data.Tuple";
"Data.Enum" -> "Data.Unfoldable";
"Data.Enum" -> "Data.Unfoldable1";
"Data.Enum" -> "Partial.Unsafe";
"Data.Enum.Gen" -> "Prelude";
"Data.Enum.Gen" -> "Control.Monad.Gen";
"Data.Enum.Gen" -> "Data.Enum";
"Data.Enum.Gen" -> "Data.Maybe";
"Data.Enum.Gen" -> "Data.NonEmpty";
"Data.Enum.Generic" -> "Prelude";
"Data.Enum.Generic" -> "Data.Enum";
"Data.Enum.Generic" -> "Data.Generic.Rep";
"Data.Enum.Generic" -> "Data.Bounded.Generic";
"Data.Enum.Generic" -> "Data.Maybe";
"Data.Enum.Generic" -> "Data.Newtype";
"Data.Eq" -> "Data.HeytingAlgebra";
"Data.Eq" -> "Data.Symbol";
"Data.Eq" -> "Data.Unit";
"Data.Eq" -> "Data.Void";
"Data.Eq" -> "Record.Unsafe";
"Data.Eq" -> "Type.Proxy";
"Data.Eq.Generic" -> "Prelude";
"Data.Eq.Generic" -> "Data.Generic.Rep";
"Data.Equivalence" -> "Prelude";
"Data.Equivalence" -> "Data.Comparison";
"Data.Equivalence" -> "Data.Function";
"Data.Equivalence" -> "Data.Functor.Contravariant";
"Data.Equivalence" -> "Data.Newtype";
"Data.EuclideanRing" -> "Data.BooleanAlgebra";
"Data.EuclideanRing" -> "Data.CommutativeRing";
"Data.EuclideanRing" -> "Data.Eq";
"Data.EuclideanRing" -> "Data.Ring";
"Data.EuclideanRing" -> "Data.Semiring";
"Data.Exists" -> "Unsafe.Coerce";
"Data.Field" -> "Data.DivisionRing";
"Data.Field" -> "Data.CommutativeRing";
"Data.Field" -> "Data.EuclideanRing";
"Data.Field" -> "Data.Ring";
"Data.Field" -> "Data.Semiring";
"Data.Foldable" -> "Prelude";
"Data.Foldable" -> "Control.Plus";
"Data.Foldable" -> "Data.Const";
"Data.Foldable" -> "Data.Either";
"Data.Foldable" -> "Data.Functor.App";
"Data.Foldable" -> "Data.Functor.Compose";
"Data.Foldable" -> "Data.Functor.Coproduct";
"Data.Foldable" -> "Data.Functor.Product";
"Data.Foldable" -> "Data.Identity";
"Data.Foldable" -> "Data.Maybe";
"Data.Foldable" -> "Data.Maybe.First";
"Data.Foldable" -> "Data.Maybe.Last";
"Data.Foldable" -> "Data.Monoid.Additive";
"Data.Foldable" -> "Data.Monoid.Conj";
"Data.Foldable" -> "Data.Monoid.Disj";
"Data.Foldable" -> "Data.Monoid.Dual";
"Data.Foldable" -> "Data.Monoid.Endo";
"Data.Foldable" -> "Data.Monoid.Multiplicative";
"Data.Foldable" -> "Data.Newtype";
"Data.Foldable" -> "Data.Tuple";
"Data.FoldableWithIndex" -> "Prelude";
"Data.FoldableWithIndex" -> "Data.Const";
"Data.FoldableWithIndex" -> "Data.Either";
"Data.FoldableWithIndex" -> "Data.Foldable";
"Data.FoldableWithIndex" -> "Data.Functor.App";
"Data.FoldableWithIndex" -> "Data.Functor.Compose";
"Data.FoldableWithIndex" -> "Data.Functor.Coproduct";
"Data.FoldableWithIndex" -> "Data.Functor.Product";
"Data.FoldableWithIndex" -> "Data.FunctorWithIndex";
"Data.FoldableWithIndex" -> "Data.Identity";
"Data.FoldableWithIndex" -> "Data.Maybe";
"Data.FoldableWithIndex" -> "Data.Maybe.First";
"Data.FoldableWithIndex" -> "Data.Maybe.Last";
"Data.FoldableWithIndex" -> "Data.Monoid.Additive";
"Data.FoldableWithIndex" -> "Data.Monoid.Conj";
"Data.FoldableWithIndex" -> "Data.Monoid.Disj";
"Data.FoldableWithIndex" -> "Data.Monoid.Dual";
"Data.FoldableWithIndex" -> "Data.Monoid.Endo";
"Data.FoldableWithIndex" -> "Data.Monoid.Multiplicative";
"Data.FoldableWithIndex" -> "Data.Newtype";
"Data.FoldableWithIndex" -> "Data.Tuple";
"Data.Function" -> "Control.Category";
"Data.Function" -> "Data.Boolean";
"Data.Function" -> "Data.Ord";
"Data.Function" -> "Data.Ring";
"Data.Function.Memoize" -> "Prelude";
"Data.Function.Memoize" -> "Data.Char";
"Data.Function.Memoize" -> "Data.Either";
"Data.Function.Memoize" -> "Data.Generic.Rep";
"Data.Function.Memoize" -> "Data.Int.Bits";
"Data.Function.Memoize" -> "Data.Lazy";
"Data.Function.Memoize" -> "Data.List";
"Data.Function.Memoize" -> "Data.Maybe";
"Data.Function.Memoize" -> "Data.String.CodeUnits";
"Data.Function.Memoize" -> "Data.Tuple";
"Data.Function.Memoize" -> "Partial.Unsafe";
"Data.Function.Uncurried" -> "Data.Unit";
"Data.Functor" -> "Data.Function";
"Data.Functor" -> "Data.Unit";
"Data.Functor" -> "Type.Proxy";
"Data.Functor.App" -> "Prelude";
"Data.Functor.App" -> "Control.Alt";
"Data.Functor.App" -> "Control.Alternative";
"Data.Functor.App" -> "Control.Apply";
"Data.Functor.App" -> "Control.Comonad";
"Data.Functor.App" -> "Control.Extend";
"Data.Functor.App" -> "Control.Lazy";
"Data.Functor.App" -> "Control.MonadPlus";
"Data.Functor.App" -> "Control.Plus";
"Data.Functor.App" -> "Data.Eq";
"Data.Functor.App" -> "Data.Newtype";
"Data.Functor.App" -> "Data.Ord";
"Data.Functor.App" -> "Unsafe.Coerce";
"Data.Functor.Clown" -> "Prelude";
"Data.Functor.Clown" -> "Control.Biapplicative";
"Data.Functor.Clown" -> "Control.Biapply";
"Data.Functor.Clown" -> "Data.Bifunctor";
"Data.Functor.Clown" -> "Data.Functor.Contravariant";
"Data.Functor.Clown" -> "Data.Newtype";
"Data.Functor.Clown" -> "Data.Profunctor";
"Data.Functor.Compose" -> "Prelude";
"Data.Functor.Compose" -> "Control.Alt";
"Data.Functor.Compose" -> "Control.Alternative";
"Data.Functor.Compose" -> "Control.Plus";
"Data.Functor.Compose" -> "Data.Eq";
"Data.Functor.Compose" -> "Data.Functor.App";
"Data.Functor.Compose" -> "Data.Newtype";
"Data.Functor.Compose" -> "Data.Ord";
"Data.Functor.Contravariant" -> "Prelude";
"Data.Functor.Contravariant" -> "Data.Const";
"Data.Functor.Coproduct" -> "Prelude";
"Data.Functor.Coproduct" -> "Control.Comonad";
"Data.Functor.Coproduct" -> "Control.Extend";
"Data.Functor.Coproduct" -> "Data.Bifunctor";
"Data.Functor.Coproduct" -> "Data.Either";
"Data.Functor.Coproduct" -> "Data.Eq";
"Data.Functor.Coproduct" -> "Data.Newtype";
"Data.Functor.Coproduct" -> "Data.Ord";
"Data.Functor.Coproduct.Inject" -> "Prelude";
"Data.Functor.Coproduct.Inject" -> "Data.Either";
"Data.Functor.Coproduct.Inject" -> "Data.Functor.Coproduct";
"Data.Functor.Coproduct.Inject" -> "Data.Maybe";
"Data.Functor.Coproduct.Nested" -> "Prelude";
"Data.Functor.Coproduct.Nested" -> "Data.Const";
"Data.Functor.Coproduct.Nested" -> "Data.Either";
"Data.Functor.Coproduct.Nested" -> "Data.Functor.Coproduct";
"Data.Functor.Coproduct.Nested" -> "Data.Newtype";
"Data.Functor.Costar" -> "Prelude";
"Data.Functor.Costar" -> "Control.Comonad";
"Data.Functor.Costar" -> "Control.Extend";
"Data.Functor.Costar" -> "Data.Bifunctor";
"Data.Functor.Costar" -> "Data.Distributive";
"Data.Functor.Costar" -> "Data.Functor.Contravariant";
"Data.Functor.Costar" -> "Data.Functor.Invariant";
"Data.Functor.Costar" -> "Data.Newtype";
"Data.Functor.Costar" -> "Data.Profunctor";
"Data.Functor.Costar" -> "Data.Profunctor.Closed";
"Data.Functor.Costar" -> "Data.Profunctor.Strong";
"Data.Functor.Costar" -> "Data.Tuple";
"Data.Functor.Flip" -> "Prelude";
"Data.Functor.Flip" -> "Control.Biapplicative";
"Data.Functor.Flip" -> "Control.Biapply";
"Data.Functor.Flip" -> "Data.Bifunctor";
"Data.Functor.Flip" -> "Data.Functor.Contravariant";
"Data.Functor.Flip" -> "Data.Newtype";
"Data.Functor.Flip" -> "Data.Profunctor";
"Data.Functor.Invariant" -> "Control.Semigroupoid";
"Data.Functor.Invariant" -> "Data.Functor";
"Data.Functor.Invariant" -> "Data.Monoid.Additive";
"Data.Functor.Invariant" -> "Data.Monoid.Conj";
"Data.Functor.Invariant" -> "Data.Monoid.Disj";
"Data.Functor.Invariant" -> "Data.Monoid.Dual";
"Data.Functor.Invariant" -> "Data.Monoid.Endo";
"Data.Functor.Invariant" -> "Data.Monoid.Multiplicative";
"Data.Functor.Invariant" -> "Data.Monoid.Alternate";
"Data.Functor.Joker" -> "Prelude";
"Data.Functor.Joker" -> "Control.Biapplicative";
"Data.Functor.Joker" -> "Control.Biapply";
"Data.Functor.Joker" -> "Data.Bifunctor";
"Data.Functor.Joker" -> "Data.Either";
"Data.Functor.Joker" -> "Data.Newtype";
"Data.Functor.Joker" -> "Data.Profunctor";
"Data.Functor.Joker" -> "Data.Profunctor.Choice";
"Data.Functor.Product" -> "Prelude";
"Data.Functor.Product" -> "Data.Bifunctor";
"Data.Functor.Product" -> "Data.Eq";
"Data.Functor.Product" -> "Data.Newtype";
"Data.Functor.Product" -> "Data.Ord";
"Data.Functor.Product" -> "Data.Tuple";
"Data.Functor.Product.Nested" -> "Prelude";
"Data.Functor.Product.Nested" -> "Data.Const";
"Data.Functor.Product.Nested" -> "Data.Functor.Product";
"Data.Functor.Product.Nested" -> "Data.Tuple";
"Data.Functor.Product2" -> "Prelude";
"Data.Functor.Product2" -> "Control.Biapplicative";
"Data.Functor.Product2" -> "Control.Biapply";
"Data.Functor.Product2" -> "Data.Bifunctor";
"Data.Functor.Product2" -> "Data.Profunctor";
"Data.FunctorWithIndex" -> "Prelude";
"Data.FunctorWithIndex" -> "Data.Bifunctor";
"Data.FunctorWithIndex" -> "Data.Const";
"Data.FunctorWithIndex" -> "Data.Either";
"Data.FunctorWithIndex" -> "Data.Functor.App";
"Data.FunctorWithIndex" -> "Data.Functor.Compose";
"Data.FunctorWithIndex" -> "Data.Functor.Coproduct";
"Data.FunctorWithIndex" -> "Data.Functor.Product";
"Data.FunctorWithIndex" -> "Data.Identity";
"Data.FunctorWithIndex" -> "Data.Maybe";
"Data.FunctorWithIndex" -> "Data.Maybe.First";
"Data.FunctorWithIndex" -> "Data.Maybe.Last";
"Data.FunctorWithIndex" -> "Data.Monoid.Additive";
"Data.FunctorWithIndex" -> "Data.Monoid.Conj";
"Data.FunctorWithIndex" -> "Data.Monoid.Disj";
"Data.FunctorWithIndex" -> "Data.Monoid.Dual";
"Data.FunctorWithIndex" -> "Data.Monoid.Multiplicative";
"Data.FunctorWithIndex" -> "Data.Tuple";
"Data.Generic.Rep" -> "Data.Semigroup";
"Data.Generic.Rep" -> "Data.Show";
"Data.Generic.Rep" -> "Data.Symbol";
"Data.Generic.Rep" -> "Data.Void";
"Data.Generic.Rep" -> "Type.Proxy";
"Data.HeytingAlgebra" -> "Data.Symbol";
"Data.HeytingAlgebra" -> "Data.Unit";
"Data.HeytingAlgebra" -> "Record.Unsafe";
"Data.HeytingAlgebra" -> "Type.Proxy";
"Data.HeytingAlgebra.Generic" -> "Prelude";
"Data.HeytingAlgebra.Generic" -> "Data.Generic.Rep";
"Data.HeytingAlgebra.Generic" -> "Data.HeytingAlgebra";
"Data.Identity" -> "Prelude";
"Data.Identity" -> "Control.Alt";
"Data.Identity" -> "Control.Comonad";
"Data.Identity" -> "Control.Extend";
"Data.Identity" -> "Control.Lazy";
"Data.Identity" -> "Data.Eq";
"Data.Identity" -> "Data.Functor.Invariant";
"Data.Identity" -> "Data.Newtype";
"Data.Identity" -> "Data.Ord";
"Data.Int" -> "Prelude";
"Data.Int" -> "Data.Int.Bits";
"Data.Int" -> "Data.Maybe";
"Data.Int" -> "Data.Number";
"Data.Int" -> "Data.Number";
"Data.Interval" -> "Prelude";
"Data.Interval" -> "Control.Extend";
"Data.Interval" -> "Data.Bifoldable";
"Data.Interval" -> "Data.Bifunctor";
"Data.Interval" -> "Data.Bitraversable";
"Data.Interval" -> "Data.Foldable";
"Data.Interval" -> "Data.Interval.Duration";
"Data.Interval" -> "Data.Maybe";
"Data.Interval" -> "Data.Traversable";
"Data.Interval.Duration" -> "Prelude";
"Data.Interval.Duration" -> "Data.Map";
"Data.Interval.Duration" -> "Data.Newtype";
"Data.Interval.Duration.Iso" -> "Prelude";
"Data.Interval.Duration.Iso" -> "Control.Plus";
"Data.Interval.Duration.Iso" -> "Data.Either";
"Data.Interval.Duration.Iso" -> "Data.Foldable";
"Data.Interval.Duration.Iso" -> "Data.Interval.Duration";
"Data.Interval.Duration.Iso" -> "Data.List";
"Data.Interval.Duration.Iso" -> "Data.List.NonEmpty";
"Data.Interval.Duration.Iso" -> "Data.List.Types";
"Data.Interval.Duration.Iso" -> "Data.Map";
"Data.Interval.Duration.Iso" -> "Data.Number";
"Data.Interval.Duration.Iso" -> "Data.Maybe";
"Data.Interval.Duration.Iso" -> "Data.Monoid.Additive";
"Data.Interval.Duration.Iso" -> "Data.Newtype";
"Data.Interval.Duration.Iso" -> "Data.Tuple";
"Data.JSDate" -> "Prelude";
"Data.JSDate" -> "Data.Date";
"Data.JSDate" -> "Data.DateTime";
"Data.JSDate" -> "Data.DateTime";
"Data.JSDate" -> "Data.DateTime.Instant";
"Data.JSDate" -> "Data.DateTime.Instant";
"Data.JSDate" -> "Data.Enum";
"Data.JSDate" -> "Data.Function.Uncurried";
"Data.JSDate" -> "Data.Int";
"Data.JSDate" -> "Data.Maybe";
"Data.JSDate" -> "Data.Time";
"Data.JSDate" -> "Data.Time.Duration";
"Data.JSDate" -> "Effect";
"Data.JSDate" -> "Foreign";
"Data.Lazy" -> "Prelude";
"Data.Lazy" -> "Control.Comonad";
"Data.Lazy" -> "Control.Extend";
"Data.Lazy" -> "Control.Lazy";
"Data.Lazy" -> "Data.Eq";
"Data.Lazy" -> "Data.Foldable";
"Data.Lazy" -> "Data.FoldableWithIndex";
"Data.Lazy" -> "Data.Functor.Invariant";
"Data.Lazy" -> "Data.FunctorWithIndex";
"Data.Lazy" -> "Data.HeytingAlgebra";
"Data.Lazy" -> "Data.Ord";
"Data.Lazy" -> "Data.Semigroup.Foldable";
"Data.Lazy" -> "Data.Semigroup.Traversable";
"Data.Lazy" -> "Data.Traversable";
"Data.Lazy" -> "Data.TraversableWithIndex";
"Data.List" -> "Prelude";
"Data.List" -> "Control.Alt";
"Data.List" -> "Control.Alternative";
"Data.List" -> "Control.Lazy";
"Data.List" -> "Control.Monad.Rec.Class";
"Data.List" -> "Data.Bifunctor";
"Data.List" -> "Data.Foldable";
"Data.List" -> "Data.Foldable";
"Data.List" -> "Data.List.Internal";
"Data.List" -> "Data.List.Types";
"Data.List" -> "Data.List.Types";
"Data.List" -> "Data.Maybe";
"Data.List" -> "Data.Newtype";
"Data.List" -> "Data.NonEmpty";
"Data.List" -> "Data.Traversable";
"Data.List" -> "Data.Traversable";
"Data.List" -> "Data.Tuple";
"Data.List" -> "Data.Unfoldable";
"Data.List.Internal" -> "Prelude";
"Data.List.Internal" -> "Data.List.Types";
"Data.List.Lazy" -> "Prelude";
"Data.List.Lazy" -> "Control.Alt";
"Data.List.Lazy" -> "Control.Alternative";
"Data.List.Lazy" -> "Control.Lazy";
"Data.List.Lazy" -> "Control.Monad.Rec.Class";
"Data.List.Lazy" -> "Data.Foldable";
"Data.List.Lazy" -> "Data.Foldable";
"Data.List.Lazy" -> "Data.Lazy";
"Data.List.Lazy" -> "Data.List.Internal";
"Data.List.Lazy" -> "Data.List.Lazy.Types";
"Data.List.Lazy" -> "Data.List.Lazy.Types";
"Data.List.Lazy" -> "Data.Maybe";
"Data.List.Lazy" -> "Data.Newtype";
"Data.List.Lazy" -> "Data.NonEmpty";
"Data.List.Lazy" -> "Data.Traversable";
"Data.List.Lazy" -> "Data.Traversable";
"Data.List.Lazy" -> "Data.Tuple";
"Data.List.Lazy" -> "Data.Unfoldable";
"Data.List.Lazy.NonEmpty" -> "Prelude";
"Data.List.Lazy.NonEmpty" -> "Data.Foldable";
"Data.List.Lazy.NonEmpty" -> "Data.Lazy";
"Data.List.Lazy.NonEmpty" -> "Data.List.Lazy";
"Data.List.Lazy.NonEmpty" -> "Data.List.Lazy";
"Data.List.Lazy.NonEmpty" -> "Data.List.Lazy.Types";
"Data.List.Lazy.NonEmpty" -> "Data.Maybe";
"Data.List.Lazy.NonEmpty" -> "Data.NonEmpty";
"Data.List.Lazy.NonEmpty" -> "Data.Tuple";
"Data.List.Lazy.NonEmpty" -> "Data.Unfoldable";
"Data.List.Lazy.Types" -> "Prelude";
"Data.List.Lazy.Types" -> "Control.Alt";
"Data.List.Lazy.Types" -> "Control.Alternative";
"Data.List.Lazy.Types" -> "Control.Comonad";
"Data.List.Lazy.Types" -> "Control.Extend";
"Data.List.Lazy.Types" -> "Control.Lazy";
"Data.List.Lazy.Types" -> "Control.MonadPlus";
"Data.List.Lazy.Types" -> "Control.Plus";
"Data.List.Lazy.Types" -> "Data.Eq";
"Data.List.Lazy.Types" -> "Data.Foldable";
"Data.List.Lazy.Types" -> "Data.FoldableWithIndex";
"Data.List.Lazy.Types" -> "Data.FunctorWithIndex";
"Data.List.Lazy.Types" -> "Data.Lazy";
"Data.List.Lazy.Types" -> "Data.Maybe";
"Data.List.Lazy.Types" -> "Data.Newtype";
"Data.List.Lazy.Types" -> "Data.NonEmpty";
"Data.List.Lazy.Types" -> "Data.NonEmpty";
"Data.List.Lazy.Types" -> "Data.Ord";
"Data.List.Lazy.Types" -> "Data.Traversable";
"Data.List.Lazy.Types" -> "Data.TraversableWithIndex";
"Data.List.Lazy.Types" -> "Data.Tuple";
"Data.List.Lazy.Types" -> "Data.Unfoldable";
"Data.List.Lazy.Types" -> "Data.Unfoldable1";
"Data.List.NonEmpty" -> "Prelude";
"Data.List.NonEmpty" -> "Data.Foldable";
"Data.List.NonEmpty" -> "Data.List";
"Data.List.NonEmpty" -> "Data.List";
"Data.List.NonEmpty" -> "Data.List.Types";
"Data.List.NonEmpty" -> "Data.Maybe";
"Data.List.NonEmpty" -> "Data.NonEmpty";
"Data.List.NonEmpty" -> "Data.NonEmpty";
"Data.List.NonEmpty" -> "Data.Semigroup.Traversable";
"Data.List.NonEmpty" -> "Data.Tuple";
"Data.List.NonEmpty" -> "Data.Unfoldable";
"Data.List.NonEmpty" -> "Partial.Unsafe";
"Data.List.NonEmpty" -> "Data.Foldable";
"Data.List.NonEmpty" -> "Data.Semigroup.Foldable";
"Data.List.NonEmpty" -> "Data.Semigroup.Traversable";
"Data.List.NonEmpty" -> "Data.Traversable";
"Data.List.Partial" -> "Data.List";
"Data.List.Types" -> "Prelude";
"Data.List.Types" -> "Control.Alt";
"Data.List.Types" -> "Control.Alternative";
"Data.List.Types" -> "Control.Apply";
"Data.List.Types" -> "Control.Comonad";
"Data.List.Types" -> "Control.Extend";
"Data.List.Types" -> "Control.MonadPlus";
"Data.List.Types" -> "Control.Plus";
"Data.List.Types" -> "Data.Eq";
"Data.List.Types" -> "Data.Foldable";
"Data.List.Types" -> "Data.FoldableWithIndex";
"Data.List.Types" -> "Data.FunctorWithIndex";
"Data.List.Types" -> "Data.Maybe";
"Data.List.Types" -> "Data.Newtype";
"Data.List.Types" -> "Data.NonEmpty";
"Data.List.Types" -> "Data.NonEmpty";
"Data.List.Types" -> "Data.Ord";
"Data.List.Types" -> "Data.Semigroup.Foldable";
"Data.List.Types" -> "Data.Semigroup.Traversable";
"Data.List.Types" -> "Data.Traversable";
"Data.List.Types" -> "Data.TraversableWithIndex";
"Data.List.Types" -> "Data.Tuple";
"Data.List.Types" -> "Data.Unfoldable";
"Data.List.Types" -> "Data.Unfoldable1";
"Data.List.ZipList" -> "Prelude";
"Data.List.ZipList" -> "Control.Alt";
"Data.List.ZipList" -> "Control.Alternative";
"Data.List.ZipList" -> "Control.Plus";
"Data.List.ZipList" -> "Data.Foldable";
"Data.List.ZipList" -> "Data.List.Lazy";
"Data.List.ZipList" -> "Data.Newtype";
"Data.List.ZipList" -> "Data.Traversable";
"Data.List.ZipList" -> "Partial.Unsafe";
"Data.Map" -> "Prelude";
"Data.Map" -> "Control.Alt";
"Data.Map" -> "Control.Plus";
"Data.Map" -> "Data.Eq";
"Data.Map" -> "Data.Foldable";
"Data.Map" -> "Data.FoldableWithIndex";
"Data.Map" -> "Data.FunctorWithIndex";
"Data.Map" -> "Data.Map.Internal";
"Data.Map" -> "Data.Newtype";
"Data.Map" -> "Data.Ord";
"Data.Map" -> "Data.Traversable";
"Data.Map" -> "Data.TraversableWithIndex";
"Data.Map" -> "Data.Set";
"Data.Map.Gen" -> "Prelude";
"Data.Map.Gen" -> "Control.Monad.Gen";
"Data.Map.Gen" -> "Control.Monad.Rec.Class";
"Data.Map.Gen" -> "Data.Map";
"Data.Map.Gen" -> "Data.Tuple";
"Data.Map.Gen" -> "Data.List";
"Data.Map.Internal" -> "Prelude";
"Data.Map.Internal" -> "Control.Alt";
"Data.Map.Internal" -> "Control.Plus";
"Data.Map.Internal" -> "Data.Eq";
"Data.Map.Internal" -> "Data.Foldable";
"Data.Map.Internal" -> "Data.FoldableWithIndex";
"Data.Map.Internal" -> "Data.Function.Uncurried";
"Data.Map.Internal" -> "Data.FunctorWithIndex";
"Data.Map.Internal" -> "Data.List";
"Data.Map.Internal" -> "Data.Maybe";
"Data.Map.Internal" -> "Data.Ord";
"Data.Map.Internal" -> "Data.Traversable";
"Data.Map.Internal" -> "Data.TraversableWithIndex";
"Data.Map.Internal" -> "Data.Tuple";
"Data.Map.Internal" -> "Data.Unfoldable";
"Data.Maybe" -> "Prelude";
"Data.Maybe" -> "Control.Alt";
"Data.Maybe" -> "Control.Alternative";
"Data.Maybe" -> "Control.Extend";
"Data.Maybe" -> "Control.Plus";
"Data.Maybe" -> "Data.Eq";
"Data.Maybe" -> "Data.Functor.Invariant";
"Data.Maybe" -> "Data.Generic.Rep";
"Data.Maybe" -> "Data.Ord";
"Data.Maybe.First" -> "Prelude";
"Data.Maybe.First" -> "Control.Alt";
"Data.Maybe.First" -> "Control.Alternative";
"Data.Maybe.First" -> "Control.Extend";
"Data.Maybe.First" -> "Control.Plus";
"Data.Maybe.First" -> "Data.Eq";
"Data.Maybe.First" -> "Data.Functor.Invariant";
"Data.Maybe.First" -> "Data.Maybe";
"Data.Maybe.First" -> "Data.Newtype";
"Data.Maybe.First" -> "Data.Ord";
"Data.Maybe.Last" -> "Prelude";
"Data.Maybe.Last" -> "Control.Alt";
"Data.Maybe.Last" -> "Control.Alternative";
"Data.Maybe.Last" -> "Control.Extend";
"Data.Maybe.Last" -> "Control.Plus";
"Data.Maybe.Last" -> "Data.Eq";
"Data.Maybe.Last" -> "Data.Functor.Invariant";
"Data.Maybe.Last" -> "Data.Maybe";
"Data.Maybe.Last" -> "Data.Newtype";
"Data.Maybe.Last" -> "Data.Ord";
"Data.Monoid" -> "Data.Boolean";
"Data.Monoid" -> "Data.Eq";
"Data.Monoid" -> "Data.EuclideanRing";
"Data.Monoid" -> "Data.Ord";
"Data.Monoid" -> "Data.Ordering";
"Data.Monoid" -> "Data.Semigroup";
"Data.Monoid" -> "Data.Symbol";
"Data.Monoid" -> "Data.Unit";
"Data.Monoid" -> "Record.Unsafe";
"Data.Monoid" -> "Type.Proxy";
"Data.Monoid.Additive" -> "Prelude";
"Data.Monoid.Additive" -> "Data.Eq";
"Data.Monoid.Additive" -> "Data.Ord";
"Data.Monoid.Alternate" -> "Prelude";
"Data.Monoid.Alternate" -> "Control.Alternative";
"Data.Monoid.Alternate" -> "Control.Comonad";
"Data.Monoid.Alternate" -> "Data.Eq";
"Data.Monoid.Alternate" -> "Data.Newtype";
"Data.Monoid.Alternate" -> "Data.Ord";
"Data.Monoid.Conj" -> "Prelude";
"Data.Monoid.Conj" -> "Data.Eq";
"Data.Monoid.Conj" -> "Data.HeytingAlgebra";
"Data.Monoid.Conj" -> "Data.Ord";
"Data.Monoid.Disj" -> "Prelude";
"Data.Monoid.Disj" -> "Data.Eq";
"Data.Monoid.Disj" -> "Data.HeytingAlgebra";
"Data.Monoid.Disj" -> "Data.Ord";
"Data.Monoid.Dual" -> "Prelude";
"Data.Monoid.Dual" -> "Data.Eq";
"Data.Monoid.Dual" -> "Data.Ord";
"Data.Monoid.Endo" -> "Prelude";
"Data.Monoid.Generic" -> "Data.Monoid";
"Data.Monoid.Generic" -> "Data.Generic.Rep";
"Data.Monoid.Multiplicative" -> "Prelude";
"Data.Monoid.Multiplicative" -> "Data.Eq";
"Data.Monoid.Multiplicative" -> "Data.Ord";
"Data.Newtype" -> "Data.Monoid.Additive";
"Data.Newtype" -> "Data.Monoid.Conj";
"Data.Newtype" -> "Data.Monoid.Disj";
"Data.Newtype" -> "Data.Monoid.Dual";
"Data.Newtype" -> "Data.Monoid.Endo";
"Data.Newtype" -> "Data.Monoid.Multiplicative";
"Data.Newtype" -> "Data.Semigroup.First";
"Data.Newtype" -> "Data.Semigroup.Last";
"Data.Newtype" -> "Safe.Coerce";
"Data.NonEmpty" -> "Prelude";
"Data.NonEmpty" -> "Control.Alt";
"Data.NonEmpty" -> "Control.Alternative";
"Data.NonEmpty" -> "Control.Plus";
"Data.NonEmpty" -> "Data.Eq";
"Data.NonEmpty" -> "Data.Foldable";
"Data.NonEmpty" -> "Data.FoldableWithIndex";
"Data.NonEmpty" -> "Data.FunctorWithIndex";
"Data.NonEmpty" -> "Data.Maybe";
"Data.NonEmpty" -> "Data.Ord";
"Data.NonEmpty" -> "Data.Semigroup.Foldable";
"Data.NonEmpty" -> "Data.Semigroup.Foldable";
"Data.NonEmpty" -> "Data.Traversable";
"Data.NonEmpty" -> "Data.TraversableWithIndex";
"Data.NonEmpty" -> "Data.Tuple";
"Data.NonEmpty" -> "Data.Unfoldable";
"Data.NonEmpty" -> "Data.Unfoldable1";
"Data.Nullable" -> "Prelude";
"Data.Nullable" -> "Data.Eq";
"Data.Nullable" -> "Data.Function";
"Data.Nullable" -> "Data.Function.Uncurried";
"Data.Nullable" -> "Data.Maybe";
"Data.Nullable" -> "Data.Ord";
"Data.Number" -> "Data.Function.Uncurried";
"Data.Number" -> "Data.Maybe";
"Data.Number.Approximate" -> "Prelude";
"Data.Number.Approximate" -> "Data.Number";
"Data.Number.Format" -> "Prelude";
"Data.Op" -> "Prelude";
"Data.Op" -> "Data.Functor.Contravariant";
"Data.Op" -> "Data.Newtype";
"Data.Ord" -> "Data.Eq";
"Data.Ord" -> "Data.Symbol";
"Data.Ord" -> "Data.Ordering";
"Data.Ord" -> "Data.Ring";
"Data.Ord" -> "Data.Unit";
"Data.Ord" -> "Data.Void";
"Data.Ord" -> "Record.Unsafe";
"Data.Ord" -> "Type.Proxy";
"Data.Ord.Down" -> "Prelude";
"Data.Ord.Down" -> "Data.Newtype";
"Data.Ord.Down" -> "Data.Ordering";
"Data.Ord.Generic" -> "Prelude";
"Data.Ord.Generic" -> "Data.Generic.Rep";
"Data.Ord.Max" -> "Prelude";
"Data.Ord.Max" -> "Data.Newtype";
"Data.Ord.Min" -> "Prelude";
"Data.Ord.Min" -> "Data.Newtype";
"Data.Ordering" -> "Data.Eq";
"Data.Ordering" -> "Data.Semigroup";
"Data.Ordering" -> "Data.Show";
"Data.Posix" -> "Prelude";
"Data.Posix" -> "Data.Newtype";
"Data.Posix.Signal" -> "Prelude";
"Data.Posix.Signal" -> "Data.Maybe";
"Data.Predicate" -> "Prelude";
"Data.Predicate" -> "Data.Functor.Contravariant";
"Data.Predicate" -> "Data.Newtype";
"Data.Profunctor" -> "Prelude";
"Data.Profunctor" -> "Data.Newtype";
"Data.Profunctor.Choice" -> "Prelude";
"Data.Profunctor.Choice" -> "Data.Either";
"Data.Profunctor.Choice" -> "Data.Profunctor";
"Data.Profunctor.Closed" -> "Prelude";
"Data.Profunctor.Closed" -> "Data.Profunctor";
"Data.Profunctor.Cochoice" -> "Data.Either";
"Data.Profunctor.Cochoice" -> "Data.Profunctor";
"Data.Profunctor.Costrong" -> "Data.Tuple";
"Data.Profunctor.Costrong" -> "Data.Profunctor";
"Data.Profunctor.Join" -> "Prelude";
"Data.Profunctor.Join" -> "Data.Functor.Invariant";
"Data.Profunctor.Join" -> "Data.Newtype";
"Data.Profunctor.Join" -> "Data.Profunctor";
"Data.Profunctor.Split" -> "Prelude";
"Data.Profunctor.Split" -> "Data.Exists";
"Data.Profunctor.Split" -> "Data.Functor.Invariant";
"Data.Profunctor.Split" -> "Data.Profunctor";
"Data.Profunctor.Star" -> "Prelude";
"Data.Profunctor.Star" -> "Control.Alt";
"Data.Profunctor.Star" -> "Control.Alternative";
"Data.Profunctor.Star" -> "Control.MonadPlus";
"Data.Profunctor.Star" -> "Control.Plus";
"Data.Profunctor.Star" -> "Data.Distributive";
"Data.Profunctor.Star" -> "Data.Either";
"Data.Profunctor.Star" -> "Data.Functor.Invariant";
"Data.Profunctor.Star" -> "Data.Newtype";
"Data.Profunctor.Star" -> "Data.Profunctor";
"Data.Profunctor.Star" -> "Data.Profunctor.Choice";
"Data.Profunctor.Star" -> "Data.Profunctor.Closed";
"Data.Profunctor.Star" -> "Data.Profunctor.Strong";
"Data.Profunctor.Star" -> "Data.Tuple";
"Data.Profunctor.Strong" -> "Prelude";
"Data.Profunctor.Strong" -> "Data.Profunctor";
"Data.Profunctor.Strong" -> "Data.Tuple";
"Data.Reflectable" -> "Data.Ord";
"Data.Reflectable" -> "Type.Proxy";
"Data.Ring" -> "Data.Semiring";
"Data.Ring" -> "Data.Symbol";
"Data.Ring" -> "Data.Unit";
"Data.Ring" -> "Record.Unsafe";
"Data.Ring" -> "Type.Proxy";
"Data.Ring.Generic" -> "Prelude";
"Data.Ring.Generic" -> "Data.Generic.Rep";
"Data.Semigroup" -> "Data.Symbol";
"Data.Semigroup" -> "Data.Unit";
"Data.Semigroup" -> "Data.Void";
"Data.Semigroup" -> "Record.Unsafe";
"Data.Semigroup" -> "Type.Proxy";
"Data.Semigroup.First" -> "Prelude";
"Data.Semigroup.First" -> "Data.Eq";
"Data.Semigroup.First" -> "Data.Ord";
"Data.Semigroup.Foldable" -> "Prelude";
"Data.Semigroup.Foldable" -> "Data.Foldable";
"Data.Semigroup.Foldable" -> "Data.Identity";
"Data.Semigroup.Foldable" -> "Data.Monoid.Dual";
"Data.Semigroup.Foldable" -> "Data.Monoid.Multiplicative";
"Data.Semigroup.Foldable" -> "Data.Newtype";
"Data.Semigroup.Foldable" -> "Data.Ord.Max";
"Data.Semigroup.Foldable" -> "Data.Ord.Min";
"Data.Semigroup.Foldable" -> "Data.Tuple";
"Data.Semigroup.Generic" -> "Prelude";
"Data.Semigroup.Generic" -> "Data.Generic.Rep";
"Data.Semigroup.Last" -> "Prelude";
"Data.Semigroup.Last" -> "Data.Eq";
"Data.Semigroup.Last" -> "Data.Ord";
"Data.Semigroup.Traversable" -> "Prelude";
"Data.Semigroup.Traversable" -> "Data.Identity";
"Data.Semigroup.Traversable" -> "Data.Monoid.Dual";
"Data.Semigroup.Traversable" -> "Data.Monoid.Multiplicative";
"Data.Semigroup.Traversable" -> "Data.Semigroup.Foldable";
"Data.Semigroup.Traversable" -> "Data.Traversable";
"Data.Semigroup.Traversable" -> "Data.Tuple";
"Data.Semiring" -> "Data.Symbol";
"Data.Semiring" -> "Data.Unit";
"Data.Semiring" -> "Record.Unsafe";
"Data.Semiring" -> "Type.Proxy";
"Data.Semiring.Generic" -> "Prelude";
"Data.Semiring.Generic" -> "Data.Generic.Rep";
"Data.Set" -> "Prelude";
"Data.Set" -> "Data.Eq";
"Data.Set" -> "Data.Foldable";
"Data.Set" -> "Data.List";
"Data.Set" -> "Data.List";
"Data.Set" -> "Data.Map.Internal";
"Data.Set" -> "Data.Maybe";
"Data.Set" -> "Data.Ord";
"Data.Set" -> "Data.Unfoldable";
"Data.Set" -> "Prelude";
"Data.Set" -> "Safe.Coerce";
"Data.Set.NonEmpty" -> "Prelude";
"Data.Set.NonEmpty" -> "Data.Array.NonEmpty";
"Data.Set.NonEmpty" -> "Data.Eq";
"Data.Set.NonEmpty" -> "Data.Foldable";
"Data.Set.NonEmpty" -> "Data.Function.Uncurried";
"Data.Set.NonEmpty" -> "Data.List.NonEmpty";
"Data.Set.NonEmpty" -> "Data.Map.Internal";
"Data.Set.NonEmpty" -> "Data.Maybe";
"Data.Set.NonEmpty" -> "Data.Ord";
"Data.Set.NonEmpty" -> "Data.Semigroup.Foldable";
"Data.Set.NonEmpty" -> "Data.Set";
"Data.Set.NonEmpty" -> "Data.Set";
"Data.Set.NonEmpty" -> "Data.Tuple";
"Data.Set.NonEmpty" -> "Data.Unfoldable";
"Data.Set.NonEmpty" -> "Partial.Unsafe";
"Data.Set.NonEmpty" -> "Safe.Coerce";
"Data.Show" -> "Data.Semigroup";
"Data.Show" -> "Data.Symbol";
"Data.Show" -> "Data.Unit";
"Data.Show" -> "Data.Void";
"Data.Show" -> "Record.Unsafe";
"Data.Show" -> "Type.Proxy";
"Data.Show.Generic" -> "Prelude";
"Data.Show.Generic" -> "Data.Generic.Rep";
"Data.Show.Generic" -> "Data.Symbol";
"Data.Show.Generic" -> "Type.Proxy";
"Data.String" -> "Data.String.CodePoints";
"Data.String" -> "Data.String.Common";
"Data.String" -> "Data.String.Pattern";
"Data.String.CaseInsensitive" -> "Prelude";
"Data.String.CaseInsensitive" -> "Data.Newtype";
"Data.String.CaseInsensitive" -> "Data.String";
"Data.String.CodePoints" -> "Prelude";
"Data.String.CodePoints" -> "Data.Array";
"Data.String.CodePoints" -> "Data.Enum";
"Data.String.CodePoints" -> "Data.Int";
"Data.String.CodePoints" -> "Data.Maybe";
"Data.String.CodePoints" -> "Data.String.CodeUnits";
"Data.String.CodePoints" -> "Data.String.CodeUnits";
"Data.String.CodePoints" -> "Data.String.Common";
"Data.String.CodePoints" -> "Data.String.Pattern";
"Data.String.CodePoints" -> "Data.String.Unsafe";
"Data.String.CodePoints" -> "Data.Tuple";
"Data.String.CodePoints" -> "Data.Unfoldable";
"Data.String.CodeUnits" -> "Prelude";
"Data.String.CodeUnits" -> "Data.Maybe";
"Data.String.CodeUnits" -> "Data.String.Pattern";
"Data.String.CodeUnits" -> "Data.String.Unsafe";
"Data.String.Common" -> "Prelude";
"Data.String.Common" -> "Data.String.Pattern";
"Data.String.Gen" -> "Prelude";
"Data.String.Gen" -> "Control.Monad.Gen";
"Data.String.Gen" -> "Control.Monad.Rec.Class";
"Data.String.Gen" -> "Data.Char.Gen";
"Data.String.Gen" -> "Data.String.CodeUnits";
"Data.String.NonEmpty" -> "Data.String.NonEmpty.Internal";
"Data.String.NonEmpty" -> "Data.String.Pattern";
"Data.String.NonEmpty" -> "Data.String.NonEmpty.CodePoints";
"Data.String.NonEmpty.CaseInsensitive" -> "Prelude";
"Data.String.NonEmpty.CaseInsensitive" -> "Data.Newtype";
"Data.String.NonEmpty.CaseInsensitive" -> "Data.String.NonEmpty";
"Data.String.NonEmpty.CodePoints" -> "Prelude";
"Data.String.NonEmpty.CodePoints" -> "Data.Array.NonEmpty";
"Data.String.NonEmpty.CodePoints" -> "Data.Array.NonEmpty";
"Data.String.NonEmpty.CodePoints" -> "Data.Maybe";
"Data.String.NonEmpty.CodePoints" -> "Data.Semigroup.Foldable";
"Data.String.NonEmpty.CodePoints" -> "Data.Semigroup.Foldable";
"Data.String.NonEmpty.CodePoints" -> "Data.String.CodePoints";
"Data.String.NonEmpty.CodePoints" -> "Data.String.CodePoints";
"Data.String.NonEmpty.CodePoints" -> "Data.String.NonEmpty.Internal";
"Data.String.NonEmpty.CodePoints" -> "Data.String.Pattern";
"Data.String.NonEmpty.CodePoints" -> "Partial.Unsafe";
"Data.String.NonEmpty.CodeUnits" -> "Prelude";
"Data.String.NonEmpty.CodeUnits" -> "Data.Array.NonEmpty";
"Data.String.NonEmpty.CodeUnits" -> "Data.Array.NonEmpty";
"Data.String.NonEmpty.CodeUnits" -> "Data.Maybe";
"Data.String.NonEmpty.CodeUnits" -> "Data.Semigroup.Foldable";
"Data.String.NonEmpty.CodeUnits" -> "Data.Semigroup.Foldable";
"Data.String.NonEmpty.CodeUnits" -> "Data.String.CodeUnits";
"Data.String.NonEmpty.CodeUnits" -> "Data.String.NonEmpty.Internal";
"Data.String.NonEmpty.CodeUnits" -> "Data.String.Pattern";
"Data.String.NonEmpty.CodeUnits" -> "Data.String.Unsafe";
"Data.String.NonEmpty.CodeUnits" -> "Partial.Unsafe";
"Data.String.NonEmpty.CodeUnits" -> "Unsafe.Coerce";
"Data.String.NonEmpty.Internal" -> "Prelude";
"Data.String.NonEmpty.Internal" -> "Data.Foldable";
"Data.String.NonEmpty.Internal" -> "Data.Foldable";
"Data.String.NonEmpty.Internal" -> "Data.Maybe";
"Data.String.NonEmpty.Internal" -> "Data.Semigroup.Foldable";
"Data.String.NonEmpty.Internal" -> "Data.String";
"Data.String.NonEmpty.Internal" -> "Data.String.Pattern";
"Data.String.NonEmpty.Internal" -> "Data.Symbol";
"Data.String.NonEmpty.Internal" -> "Type.Proxy";
"Data.String.NonEmpty.Internal" -> "Unsafe.Coerce";
"Data.String.Pattern" -> "Prelude";
"Data.String.Pattern" -> "Data.Newtype";
"Data.String.Regex" -> "Prelude";
"Data.String.Regex" -> "Data.Array.NonEmpty";
"Data.String.Regex" -> "Data.Either";
"Data.String.Regex" -> "Data.Maybe";
"Data.String.Regex" -> "Data.String";
"Data.String.Regex" -> "Data.String.Pattern";
"Data.String.Regex" -> "Data.String.Regex.Flags";
"Data.String.Regex.Flags" -> "Prelude";
"Data.String.Regex.Flags" -> "Control.MonadPlus";
"Data.String.Regex.Flags" -> "Data.Newtype";
"Data.String.Regex.Flags" -> "Data.String";
"Data.String.Regex.Unsafe" -> "Control.Category";
"Data.String.Regex.Unsafe" -> "Data.Either";
"Data.String.Regex.Unsafe" -> "Data.String.Regex";
"Data.String.Regex.Unsafe" -> "Data.String.Regex.Flags";
"Data.String.Regex.Unsafe" -> "Partial.Unsafe";
"Data.Symbol" -> "Type.Proxy";
"Data.Time" -> "Prelude";
"Data.Time" -> "Data.Enum";
"Data.Time" -> "Data.Int";
"Data.Time" -> "Data.Maybe";
"Data.Time" -> "Data.Number";
"Data.Time" -> "Data.Newtype";
"Data.Time" -> "Data.Time.Component";
"Data.Time" -> "Data.Time.Duration";
"Data.Time" -> "Data.Tuple";
"Data.Time" -> "Partial.Unsafe";
"Data.Time.Component" -> "Prelude";
"Data.Time.Component" -> "Data.Enum";
"Data.Time.Component" -> "Data.Maybe";
"Data.Time.Component.Gen" -> "Control.Monad.Gen";
"Data.Time.Component.Gen" -> "Data.Enum.Gen";
"Data.Time.Component.Gen" -> "Data.Time.Component";
"Data.Time.Duration" -> "Prelude";
"Data.Time.Duration" -> "Data.Newtype";
"Data.Time.Duration.Gen" -> "Prelude";
"Data.Time.Duration.Gen" -> "Control.Monad.Gen";
"Data.Time.Duration.Gen" -> "Control.Monad.Gen";
"Data.Time.Duration.Gen" -> "Data.Time.Duration";
"Data.Time.Gen" -> "Prelude";
"Data.Time.Gen" -> "Control.Monad.Gen";
"Data.Time.Gen" -> "Data.Time";
"Data.Time.Gen" -> "Data.Time.Component.Gen";
"Data.Traversable" -> "Prelude";
"Data.Traversable" -> "Control.Apply";
"Data.Traversable" -> "Data.Const";
"Data.Traversable" -> "Data.Either";
"Data.Traversable" -> "Data.Foldable";
"Data.Traversable" -> "Data.Functor.App";
"Data.Traversable" -> "Data.Functor.Compose";
"Data.Traversable" -> "Data.Functor.Coproduct";
"Data.Traversable" -> "Data.Functor.Product";
"Data.Traversable" -> "Data.Identity";
"Data.Traversable" -> "Data.Maybe";
"Data.Traversable" -> "Data.Maybe.First";
"Data.Traversable" -> "Data.Maybe.Last";
"Data.Traversable" -> "Data.Monoid.Additive";
"Data.Traversable" -> "Data.Monoid.Conj";
"Data.Traversable" -> "Data.Monoid.Disj";
"Data.Traversable" -> "Data.Monoid.Dual";
"Data.Traversable" -> "Data.Monoid.Multiplicative";
"Data.Traversable" -> "Data.Traversable.Accum";
"Data.Traversable" -> "Data.Traversable.Accum.Internal";
"Data.Traversable" -> "Data.Tuple";
"Data.Traversable.Accum.Internal" -> "Prelude";
"Data.Traversable.Accum.Internal" -> "Data.Traversable.Accum";
"Data.TraversableWithIndex" -> "Prelude";
"Data.TraversableWithIndex" -> "Control.Apply";
"Data.TraversableWithIndex" -> "Data.Const";
"Data.TraversableWithIndex" -> "Data.Either";
"Data.TraversableWithIndex" -> "Data.FoldableWithIndex";
"Data.TraversableWithIndex" -> "Data.Functor.App";
"Data.TraversableWithIndex" -> "Data.Functor.Compose";
"Data.TraversableWithIndex" -> "Data.Functor.Coproduct";
"Data.TraversableWithIndex" -> "Data.Functor.Product";
"Data.TraversableWithIndex" -> "Data.FunctorWithIndex";
"Data.TraversableWithIndex" -> "Data.Identity";
"Data.TraversableWithIndex" -> "Data.Maybe";
"Data.TraversableWithIndex" -> "Data.Maybe.First";
"Data.TraversableWithIndex" -> "Data.Maybe.Last";
"Data.TraversableWithIndex" -> "Data.Monoid.Additive";
"Data.TraversableWithIndex" -> "Data.Monoid.Conj";
"Data.TraversableWithIndex" -> "Data.Monoid.Disj";
"Data.TraversableWithIndex" -> "Data.Monoid.Dual";
"Data.TraversableWithIndex" -> "Data.Monoid.Multiplicative";
"Data.TraversableWithIndex" -> "Data.Traversable";
"Data.TraversableWithIndex" -> "Data.Traversable.Accum";
"Data.TraversableWithIndex" -> "Data.Traversable.Accum.Internal";
"Data.TraversableWithIndex" -> "Data.Tuple";
"Data.Tuple" -> "Prelude";
"Data.Tuple" -> "Control.Comonad";
"Data.Tuple" -> "Control.Extend";
"Data.Tuple" -> "Control.Lazy";
"Data.Tuple" -> "Data.Eq";
"Data.Tuple" -> "Data.Functor.Invariant";
"Data.Tuple" -> "Data.Generic.Rep";
"Data.Tuple" -> "Data.HeytingAlgebra";
"Data.Tuple" -> "Data.Ord";
"Data.Tuple.Nested" -> "Prelude";
"Data.Tuple.Nested" -> "Data.Tuple";
"Data.Unfoldable" -> "Prelude";
"Data.Unfoldable" -> "Data.Maybe";
"Data.Unfoldable" -> "Data.Traversable";
"Data.Unfoldable" -> "Data.Tuple";
"Data.Unfoldable" -> "Data.Unfoldable1";
"Data.Unfoldable" -> "Partial.Unsafe";
"Data.Unfoldable1" -> "Prelude";
"Data.Unfoldable1" -> "Data.Maybe";
"Data.Unfoldable1" -> "Data.Semigroup.Traversable";
"Data.Unfoldable1" -> "Data.Tuple";
"Data.Unfoldable1" -> "Partial.Unsafe";
"Data.Yoneda" -> "Prelude";
"Data.Yoneda" -> "Control.Comonad";
"Data.Yoneda" -> "Control.Extend";
"Data.Yoneda" -> "Control.Monad.Trans.Class";
"Data.Yoneda" -> "Data.Eq";
"Data.Yoneda" -> "Data.Ord";
"Effect" -> "Prelude";
"Effect" -> "Control.Apply";
"Effect.AVar" -> "Prelude";
"Effect.AVar" -> "Data.Either";
"Effect.AVar" -> "Data.Function.Uncurried";
"Effect.AVar" -> "Data.Maybe";
"Effect.AVar" -> "Effect";
"Effect.AVar" -> "Effect.Exception";
"Effect.Aff" -> "Prelude";
"Effect.Aff" -> "Control.Alt";
"Effect.Aff" -> "Control.Alternative";
"Effect.Aff" -> "Control.Apply";
"Effect.Aff" -> "Control.Lazy";
"Effect.Aff" -> "Control.Monad.Error.Class";
"Effect.Aff" -> "Control.Monad.Error.Class";
"Effect.Aff" -> "Control.Monad.Rec.Class";
"Effect.Aff" -> "Control.Monad.ST.Class";
"Effect.Aff" -> "Control.Monad.ST.Global";
"Effect.Aff" -> "Control.Parallel";
"Effect.Aff" -> "Control.Parallel.Class";
"Effect.Aff" -> "Control.Parallel.Class";
"Effect.Aff" -> "Control.Plus";
"Effect.Aff" -> "Data.Either";
"Effect.Aff" -> "Data.Function.Uncurried";
"Effect.Aff" -> "Data.Newtype";
"Effect.Aff" -> "Data.Time.Duration";
"Effect.Aff" -> "Data.Time.Duration";
"Effect.Aff" -> "Effect";
"Effect.Aff" -> "Effect.Class";
"Effect.Aff" -> "Effect.Exception";
"Effect.Aff" -> "Effect.Exception";
"Effect.Aff" -> "Effect.Unsafe";
"Effect.Aff" -> "Partial.Unsafe";
"Effect.Aff" -> "Unsafe.Coerce";
"Effect.Aff.AVar" -> "Prelude";
"Effect.Aff.AVar" -> "Data.Maybe";
"Effect.Aff.AVar" -> "Effect.Aff";
"Effect.Aff.AVar" -> "Effect.AVar";
"Effect.Aff.AVar" -> "Effect.AVar";
"Effect.Aff.AVar" -> "Effect.Class";
"Effect.Aff.AVar" -> "Effect.Exception";
"Effect.Aff.Class" -> "Prelude";
"Effect.Aff.Class" -> "Control.Monad.Cont.Trans";
"Effect.Aff.Class" -> "Control.Monad.Except.Trans";
"Effect.Aff.Class" -> "Control.Monad.List.Trans";
"Effect.Aff.Class" -> "Control.Monad.Maybe.Trans";
"Effect.Aff.Class" -> "Control.Monad.Reader.Trans";
"Effect.Aff.Class" -> "Control.Monad.RWS.Trans";
"Effect.Aff.Class" -> "Control.Monad.State.Trans";
"Effect.Aff.Class" -> "Control.Monad.Trans.Class";
"Effect.Aff.Class" -> "Control.Monad.Writer.Trans";
"Effect.Aff.Class" -> "Effect.Aff";
"Effect.Aff.Class" -> "Effect.Class";
"Effect.Aff.Compat" -> "Prelude";
"Effect.Aff.Compat" -> "Data.Either";
"Effect.Aff.Compat" -> "Effect.Aff";
"Effect.Aff.Compat" -> "Effect.Exception";
"Effect.Aff.Compat" -> "Effect.Uncurried";
"Effect.Class" -> "Control.Category";
"Effect.Class" -> "Control.Monad";
"Effect.Class" -> "Effect";
"Effect.Class.Console" -> "Control.Bind";
"Effect.Class.Console" -> "Data.Function";
"Effect.Class.Console" -> "Data.Show";
"Effect.Class.Console" -> "Data.Unit";
"Effect.Class.Console" -> "Effect.Class";
"Effect.Class.Console" -> "Effect.Console";
"Effect.Console" -> "Control.Bind";
"Effect.Console" -> "Effect";
"Effect.Console" -> "Data.Show";
"Effect.Console" -> "Data.Unit";
"Effect.Exception" -> "Prelude";
"Effect.Exception" -> "Effect";
"Effect.Exception" -> "Data.Either";
"Effect.Exception" -> "Data.Maybe";
"Effect.Exception.Unsafe" -> "Effect.Exception";
"Effect.Exception.Unsafe" -> "Effect.Unsafe";
"Effect.Exception.Unsafe" -> "Control.Semigroupoid";
"Effect.Now" -> "Prelude";
"Effect.Now" -> "Data.DateTime";
"Effect.Now" -> "Data.Time.Duration";
"Effect.Now" -> "Data.DateTime.Instant";
"Effect.Now" -> "Effect";
"Effect.Ref" -> "Prelude";
"Effect.Ref" -> "Effect";
"Effect.Uncurried" -> "Data.Monoid";
"Effect.Uncurried" -> "Effect";
"Effect.Unsafe" -> "Effect";
"ExitCodes" -> "Prelude";
"ExitCodes" -> "Data.Enum";
"ExitCodes" -> "Data.Maybe";
"Foreign" -> "Prelude";
"Foreign" -> "Control.Monad.Except";
"Foreign" -> "Data.Either";
"Foreign" -> "Data.Int";
"Foreign" -> "Data.List.NonEmpty";
"Foreign" -> "Data.List.NonEmpty";
"Foreign" -> "Data.Maybe";
"Foreign" -> "Data.String.CodeUnits";
"Foreign" -> "Unsafe.Coerce";
"Foreign.Index" -> "Prelude";
"Foreign.Index" -> "Control.Monad.Except.Trans";
"Foreign.Index" -> "Foreign";
"Foreign.Index" -> "Data.Function.Uncurried";
"Foreign.Index" -> "Data.List.NonEmpty";
"Foreign.Keys" -> "Prelude";
"Foreign.Keys" -> "Foreign";
"Foreign.Keys" -> "Control.Monad.Except";
"Foreign.Keys" -> "Data.List.NonEmpty";
"Foreign.Object" -> "Prelude";
"Foreign.Object" -> "Control.Monad.ST";
"Foreign.Object" -> "Control.Monad.ST";
"Foreign.Object" -> "Data.Array";
"Foreign.Object" -> "Data.Eq";
"Foreign.Object" -> "Data.Foldable";
"Foreign.Object" -> "Data.FoldableWithIndex";
"Foreign.Object" -> "Data.Function.Uncurried";
"Foreign.Object" -> "Data.FunctorWithIndex";
"Foreign.Object" -> "Data.Maybe";
"Foreign.Object" -> "Data.Traversable";
"Foreign.Object" -> "Data.TraversableWithIndex";
"Foreign.Object" -> "Data.Tuple";
"Foreign.Object" -> "Data.Unfoldable";
"Foreign.Object" -> "Foreign.Object.ST";
"Foreign.Object" -> "Foreign.Object.ST";
"Foreign.Object" -> "Type.Row.Homogeneous";
"Foreign.Object" -> "Unsafe.Coerce";
"Foreign.Object.Gen" -> "Prelude";
"Foreign.Object.Gen" -> "Control.Monad.Gen";
"Foreign.Object.Gen" -> "Control.Monad.Rec.Class";
"Foreign.Object.Gen" -> "Foreign.Object";
"Foreign.Object.Gen" -> "Data.Tuple";
"Foreign.Object.Gen" -> "Data.List";
"Foreign.Object.ST" -> "Control.Monad.ST";
"Foreign.Object.ST" -> "Data.Maybe";
"Foreign.Object.ST.Unsafe" -> "Control.Monad.ST";
"Foreign.Object.ST.Unsafe" -> "Foreign.Object";
"Foreign.Object.ST.Unsafe" -> "Foreign.Object.ST";
"Foreign.Object.Unsafe" -> "Foreign.Object";
"Main" -> "Prelude";
"Main" -> "Effect";
"Main" -> "Effect.Console";
"Node.Buffer" -> "Prelude";
"Node.Buffer" -> "Data.ArrayBuffer.Types";
"Node.Buffer" -> "Data.Maybe";
"Node.Buffer" -> "Effect";
"Node.Buffer" -> "Effect.Uncurried";
"Node.Buffer" -> "Node.Buffer.Class";
"Node.Buffer" -> "Node.Buffer.Immutable";
"Node.Buffer" -> "Node.Buffer.Immutable";
"Node.Buffer" -> "Node.Buffer.Types";
"Node.Buffer" -> "Node.Buffer.Types";
"Node.Buffer" -> "Node.Encoding";
"Node.Buffer" -> "Unsafe.Coerce";
"Node.Buffer.Class" -> "Prelude";
"Node.Buffer.Class" -> "Data.ArrayBuffer.Types";
"Node.Buffer.Class" -> "Data.Maybe";
"Node.Buffer.Class" -> "Node.Buffer.Immutable";
"Node.Buffer.Class" -> "Node.Buffer.Types";
"Node.Buffer.Class" -> "Node.Encoding";
"Node.Buffer.Constants" -> "Effect";
"Node.Buffer.Immutable" -> "Prelude";
"Node.Buffer.Immutable" -> "Data.ArrayBuffer.Types";
"Node.Buffer.Immutable" -> "Data.Function.Uncurried";
"Node.Buffer.Immutable" -> "Data.Maybe";
"Node.Buffer.Immutable" -> "Data.Nullable";
"Node.Buffer.Immutable" -> "Effect";
"Node.Buffer.Immutable" -> "Effect.Uncurried";
"Node.Buffer.Immutable" -> "Node.Buffer.Types";
"Node.Buffer.Immutable" -> "Node.Encoding";
"Node.Buffer.Immutable" -> "Partial.Unsafe";
"Node.Buffer.ST" -> "Prelude";
"Node.Buffer.ST" -> "Control.Monad.ST";
"Node.Buffer.ST" -> "Control.Monad.ST";
"Node.Buffer.ST" -> "Data.ArrayBuffer.Types";
"Node.Buffer.ST" -> "Data.Maybe";
"Node.Buffer.ST" -> "Node.Buffer";
"Node.Buffer.ST" -> "Node.Buffer";
"Node.Buffer.ST" -> "Node.Buffer.Class";
"Node.Buffer.ST" -> "Node.Buffer.Immutable";
"Node.Buffer.ST" -> "Node.Encoding";
"Node.Buffer.ST" -> "Unsafe.Coerce";
"Node.Buffer.Types" -> "Prelude";
"Node.Encoding" -> "Prelude";
"Node.Encoding" -> "Data.Function.Uncurried";
"Node.EventEmitter" -> "Prelude";
"Node.EventEmitter" -> "Data.Either";
"Node.EventEmitter" -> "Data.Function.Uncurried";
"Node.EventEmitter" -> "Effect";
"Node.EventEmitter" -> "Effect.Uncurried";
"Node.EventEmitter" -> "Node.Symbol";
"Node.EventEmitter" -> "Unsafe.Coerce";
"Node.EventEmitter.UtilTypes" -> "Prelude";
"Node.EventEmitter.UtilTypes" -> "Effect";
"Node.EventEmitter.UtilTypes" -> "Effect.Uncurried";
"Node.EventEmitter.UtilTypes" -> "Node.EventEmitter";
"Node.FS" -> "Prelude";
"Node.FS" -> "Node.FS.Constants";
"Node.FS.Aff" -> "Prelude";
"Node.FS.Aff" -> "Data.DateTime";
"Node.FS.Aff" -> "Data.Either";
"Node.FS.Aff" -> "Data.Maybe";
"Node.FS.Aff" -> "Effect";
"Node.FS.Aff" -> "Effect.Aff";
"Node.FS.Aff" -> "Node.Buffer";
"Node.FS.Aff" -> "Node.Encoding";
"Node.FS.Aff" -> "Node.FS";
"Node.FS.Aff" -> "Node.FS.Async";
"Node.FS.Aff" -> "Node.FS.Constants";
"Node.FS.Aff" -> "Node.FS.Perms";
"Node.FS.Aff" -> "Node.FS.Stats";
"Node.FS.Aff" -> "Node.Path";
"Node.FS.Async" -> "Prelude";
"Node.FS.Async" -> "Data.DateTime";
"Node.FS.Async" -> "Data.DateTime.Instant";
"Node.FS.Async" -> "Data.Either";
"Node.FS.Async" -> "Data.Int";
"Node.FS.Async" -> "Data.Maybe";
"Node.FS.Async" -> "Data.Nullable";
"Node.FS.Async" -> "Data.Time.Duration";
"Node.FS.Async" -> "Effect";
"Node.FS.Async" -> "Effect.Exception";
"Node.FS.Async" -> "Effect.Uncurried";
"Node.FS.Async" -> "Node.Buffer";
"Node.FS.Async" -> "Node.Encoding";
"Node.FS.Async" -> "Node.FS";
"Node.FS.Async" -> "Node.FS.Constants";
"Node.FS.Async" -> "Node.FS.Perms";
"Node.FS.Async" -> "Node.FS.Stats";
"Node.FS.Async" -> "Node.Path";
"Node.FS.Constants" -> "Prelude";
"Node.FS.Constants" -> "Data.Function.Uncurried";
"Node.FS.Perms" -> "Prelude";
"Node.FS.Perms" -> "Data.Enum";
"Node.FS.Perms" -> "Data.Int";
"Node.FS.Perms" -> "Data.Maybe";
"Node.FS.Perms" -> "Data.String";
"Node.FS.Perms" -> "Data.String.CodeUnits";
"Node.FS.Perms" -> "Partial.Unsafe";
"Node.FS.Stats" -> "Prelude";
"Node.FS.Stats" -> "Data.DateTime";
"Node.FS.Stats" -> "Data.Function.Uncurried";
"Node.FS.Stats" -> "Data.JSDate";
"Node.FS.Stats" -> "Data.Maybe";
"Node.FS.Stats" -> "Data.Time.Duration";
"Node.FS.Stats" -> "Partial.Unsafe";
"Node.FS.Stream" -> "Effect";
"Node.FS.Stream" -> "Effect.Uncurried";
"Node.FS.Stream" -> "Node.FS";
"Node.FS.Stream" -> "Node.Path";
"Node.FS.Stream" -> "Node.Stream";
"Node.FS.Sync" -> "Prelude";
"Node.FS.Sync" -> "Data.DateTime";
"Node.FS.Sync" -> "Data.DateTime.Instant";
"Node.FS.Sync" -> "Data.Either";
"Node.FS.Sync" -> "Data.Int";
"Node.FS.Sync" -> "Data.Maybe";
"Node.FS.Sync" -> "Data.Nullable";
"Node.FS.Sync" -> "Data.Time.Duration";
"Node.FS.Sync" -> "Effect";
"Node.FS.Sync" -> "Effect.Exception";
"Node.FS.Sync" -> "Effect.Uncurried";
"Node.FS.Sync" -> "Node.Buffer";
"Node.FS.Sync" -> "Node.Encoding";
"Node.FS.Sync" -> "Node.FS";
"Node.FS.Sync" -> "Node.FS.Constants";
"Node.FS.Sync" -> "Node.FS.Perms";
"Node.FS.Sync" -> "Node.FS.Stats";
"Node.FS.Sync" -> "Node.Path";
"Node.Path" -> "Effect";
"Node.Platform" -> "Prelude";
"Node.Platform" -> "Data.Maybe";
"Node.Process" -> "Prelude";
"Node.Process" -> "Data.Maybe";
"Node.Process" -> "Data.Nullable";
"Node.Process" -> "Data.Posix";
"Node.Process" -> "Data.Posix.Signal";
"Node.Process" -> "Data.Posix.Signal";
"Node.Process" -> "Data.String";
"Node.Process" -> "Effect";
"Node.Process" -> "Effect.Exception";
"Node.Process" -> "Effect.Uncurried";
"Node.Process" -> "Foreign";
"Node.Process" -> "Foreign.Object";
"Node.Process" -> "Node.EventEmitter";
"Node.Process" -> "Node.EventEmitter.UtilTypes";
"Node.Process" -> "Node.Platform";
"Node.Process" -> "Node.Platform";
"Node.Process" -> "Node.Stream";
"Node.Stream" -> "Prelude";
"Node.Stream" -> "Data.Either";
"Node.Stream" -> "Data.Maybe";
"Node.Stream" -> "Data.Nullable";
"Node.Stream" -> "Effect";
"Node.Stream" -> "Effect.Exception";
"Node.Stream" -> "Effect.Uncurried";
"Node.Stream" -> "Node.Buffer";
"Node.Stream" -> "Node.Buffer";
"Node.Stream" -> "Node.Encoding";
"Node.Stream" -> "Node.EventEmitter";
"Node.Stream" -> "Node.EventEmitter.UtilTypes";
"Node.Stream" -> "Unsafe.Coerce";
"Node.Stream.Aff" -> "Prelude";
"Node.Stream.Aff" -> "Control.Monad.Rec.Class";
"Node.Stream.Aff" -> "Control.Monad.ST.Class";
"Node.Stream.Aff" -> "Data.Array";
"Node.Stream.Aff" -> "Data.Array.ST";
"Node.Stream.Aff" -> "Data.Either";
"Node.Stream.Aff" -> "Data.Maybe";
"Node.Stream.Aff" -> "Effect";
"Node.Stream.Aff" -> "Effect.Aff";
"Node.Stream.Aff" -> "Effect.Aff.Class";
"Node.Stream.Aff" -> "Effect.Class";
"Node.Stream.Aff" -> "Effect.Exception";
"Node.Stream.Aff" -> "Effect.Ref";
"Node.Stream.Aff" -> "Node.Buffer";
"Node.Stream.Aff" -> "Node.Buffer";
"Node.Stream.Aff" -> "Node.Encoding";
"Node.Stream.Aff" -> "Node.Encoding";
"Node.Stream.Aff" -> "Node.EventEmitter";
"Node.Stream.Aff" -> "Node.Stream";
"Node.Stream.Aff" -> "Node.Stream";
"Node.Symbol" -> "Prelude";
"Node.Symbol" -> "Data.Function.Uncurried";
"Node.Symbol" -> "Data.Maybe";
"Node.Symbol" -> "Data.Nullable";
"Node.Symbol" -> "Effect";
"Node.Symbol" -> "Effect.Uncurried";
"Options.Applicative" -> "Options.Applicative.Builder";
"Options.Applicative" -> "Options.Applicative.Builder.Completer";
"Options.Applicative" -> "Options.Applicative.Extra";
"Options.Applicative" -> "Options.Applicative.Types";
"Options.Applicative" -> "Options.Applicative.Internal.Utils";
"Options.Applicative.BashCompletion" -> "Prelude";
"Options.Applicative.BashCompletion" -> "Control.Alt";
"Options.Applicative.BashCompletion" -> "Data.Array";
"Options.Applicative.BashCompletion" -> "Data.Array.NonEmpty";
"Options.Applicative.BashCompletion" -> "Data.Either";
"Options.Applicative.BashCompletion" -> "Data.Exists";
"Options.Applicative.BashCompletion" -> "Data.Foldable";
"Options.Applicative.BashCompletion" -> "Data.Generic.Rep";
"Options.Applicative.BashCompletion" -> "Data.Show.Generic";
"Options.Applicative.BashCompletion" -> "Data.List";
"Options.Applicative.BashCompletion" -> "Data.Maybe";
"Options.Applicative.BashCompletion" -> "Data.Newtype";
"Options.Applicative.BashCompletion" -> "Data.String";
"Options.Applicative.BashCompletion" -> "Data.Traversable";
"Options.Applicative.BashCompletion" -> "Data.Tuple";
"Options.Applicative.BashCompletion" -> "Effect";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Builder";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Common";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Help.Chunk";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Internal";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Internal.Utils";
"Options.Applicative.BashCompletion" -> "Options.Applicative.Types";
"Options.Applicative.Builder" -> "Prelude";
"Options.Applicative.Builder" -> "Control.Alt";
"Options.Applicative.Builder" -> "Data.Either";
"Options.Applicative.Builder" -> "Data.Foldable";
"Options.Applicative.Builder" -> "Data.Int";
"Options.Applicative.Builder" -> "Data.Maybe";
"Options.Applicative.Builder" -> "Data.Newtype";
"Options.Applicative.Builder" -> "Data.String";
"Options.Applicative.Builder" -> "Data.Tuple";
"Options.Applicative.Builder" -> "Data.Tuple.Nested";
"Options.Applicative.Builder" -> "ExitCodes";
"Options.Applicative.Builder" -> "ExitCodes";
"Options.Applicative.Builder" -> "Data.Number";
"Options.Applicative.Builder" -> "Options.Applicative.Builder.Completer";
"Options.Applicative.Builder" -> "Options.Applicative.Builder.Internal";
"Options.Applicative.Builder" -> "Options.Applicative.Builder.Internal";
"Options.Applicative.Builder" -> "Options.Applicative.Help.Chunk";
"Options.Applicative.Builder" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.Builder" -> "Options.Applicative.Types";
"Options.Applicative.Builder" -> "Options.Applicative.Types";
"Options.Applicative.Builder.Completer" -> "Prelude";
"Options.Applicative.Builder.Completer" -> "Control.Monad.Error.Class";
"Options.Applicative.Builder.Completer" -> "Data.Array";
"Options.Applicative.Builder.Completer" -> "Data.Foldable";
"Options.Applicative.Builder.Completer" -> "Data.Array";
"Options.Applicative.Builder.Completer" -> "Data.Either";
"Options.Applicative.Builder.Completer" -> "Data.List";
"Options.Applicative.Builder.Completer" -> "Data.String";
"Options.Applicative.Builder.Completer" -> "Data.String.CodeUnits";
"Options.Applicative.Builder.Completer" -> "Effect";
"Options.Applicative.Builder.Completer" -> "Options.Applicative.Internal.Utils";
"Options.Applicative.Builder.Completer" -> "Options.Applicative.Types";
"Options.Applicative.Builder.Completer" -> "Options.Applicative.Types";
"Options.Applicative.Builder.Internal" -> "Prelude";
"Options.Applicative.Builder.Internal" -> "Options.Applicative.Common";
"Options.Applicative.Builder.Internal" -> "Options.Applicative.Types";
"Options.Applicative.Builder.Internal" -> "Control.Alt";
"Options.Applicative.Builder.Internal" -> "Data.Maybe";
"Options.Applicative.Builder.Internal" -> "Data.Newtype";
"Options.Applicative.Builder.Internal" -> "Data.Tuple";
"Options.Applicative.Builder.Internal" -> "Data.Foldable";
"Options.Applicative.Builder.Internal" -> "Data.Tuple.Nested";
"Options.Applicative.Common" -> "Prelude";
"Options.Applicative.Common" -> "Control.Alt";
"Options.Applicative.Common" -> "Control.Alternative";
"Options.Applicative.Common" -> "Control.Monad.Free";
"Options.Applicative.Common" -> "Control.Monad.State.Trans";
"Options.Applicative.Common" -> "Control.Monad.Trans.Class";
"Options.Applicative.Common" -> "Control.Plus";
"Options.Applicative.Common" -> "Data.Array";
"Options.Applicative.Common" -> "Data.Exists";
"Options.Applicative.Common" -> "Data.Foldable";
"Options.Applicative.Common" -> "Data.List";
"Options.Applicative.Common" -> "Data.Maybe";
"Options.Applicative.Common" -> "Data.Newtype";
"Options.Applicative.Common" -> "Data.String";
"Options.Applicative.Common" -> "Data.String.CodeUnits";
"Options.Applicative.Common" -> "Data.Tuple";
"Options.Applicative.Common" -> "Options.Applicative.Internal";
"Options.Applicative.Common" -> "Options.Applicative.Internal.Utils";
"Options.Applicative.Common" -> "Options.Applicative.Types";
"Options.Applicative.Common" -> "Options.Applicative.Types";
"Options.Applicative.Extra" -> "Prelude";
"Options.Applicative.Extra" -> "Control.Alt";
"Options.Applicative.Extra" -> "Data.Array";
"Options.Applicative.Extra" -> "Data.Array";
"Options.Applicative.Extra" -> "Data.Either";
"Options.Applicative.Extra" -> "Data.Enum";
"Options.Applicative.Extra" -> "Data.Exists";
"Options.Applicative.Extra" -> "Data.Function";
"Options.Applicative.Extra" -> "Data.List";
"Options.Applicative.Extra" -> "Data.Maybe";
"Options.Applicative.Extra" -> "Data.Newtype";
"Options.Applicative.Extra" -> "Data.String";
"Options.Applicative.Extra" -> "Data.String.CodeUnits";
"Options.Applicative.Extra" -> "Data.Tuple";
"Options.Applicative.Extra" -> "Data.Tuple.Nested";
"Options.Applicative.Extra" -> "Effect";
"Options.Applicative.Extra" -> "ExitCodes";
"Options.Applicative.Extra" -> "ExitCodes";
"Options.Applicative.Extra" -> "Node.Encoding";
"Options.Applicative.Extra" -> "Node.Process";
"Options.Applicative.Extra" -> "Node.Stream";
"Options.Applicative.Extra" -> "Options.Applicative.BashCompletion";
"Options.Applicative.Extra" -> "Options.Applicative.Builder";
"Options.Applicative.Extra" -> "Options.Applicative.Builder.Internal";
"Options.Applicative.Extra" -> "Options.Applicative.Common";
"Options.Applicative.Extra" -> "Options.Applicative.Help";
"Options.Applicative.Extra" -> "Options.Applicative.Internal";
"Options.Applicative.Extra" -> "Options.Applicative.Internal.Utils";
"Options.Applicative.Extra" -> "Options.Applicative.Types";
"Options.Applicative.Help" -> "Options.Applicative.Help.Chunk";
"Options.Applicative.Help" -> "Options.Applicative.Help.Core";
"Options.Applicative.Help" -> "Options.Applicative.Help.Levenshtein";
"Options.Applicative.Help" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.Help" -> "Options.Applicative.Help.Types";
"Options.Applicative.Help.Chunk" -> "Prelude";
"Options.Applicative.Help.Chunk" -> "Control.Alt";
"Options.Applicative.Help.Chunk" -> "Control.Alternative";
"Options.Applicative.Help.Chunk" -> "Data.Foldable";
"Options.Applicative.Help.Chunk" -> "Data.Generic.Rep";
"Options.Applicative.Help.Chunk" -> "Data.Show.Generic";
"Options.Applicative.Help.Chunk" -> "Data.Maybe";
"Options.Applicative.Help.Chunk" -> "Data.Newtype";
"Options.Applicative.Help.Chunk" -> "Data.Tuple";
"Options.Applicative.Help.Chunk" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.Help.Chunk" -> "Options.Applicative.Internal.Utils";
"Options.Applicative.Help.Core" -> "Prelude";
"Options.Applicative.Help.Core" -> "Control.Alternative";
"Options.Applicative.Help.Core" -> "Data.Array";
"Options.Applicative.Help.Core" -> "Data.Array";
"Options.Applicative.Help.Core" -> "Data.Array.NonEmpty";
"Options.Applicative.Help.Core" -> "Data.Function";
"Options.Applicative.Help.Core" -> "Data.Array.NonEmpty";
"Options.Applicative.Help.Core" -> "Data.Maybe";
"Options.Applicative.Help.Core" -> "Data.Newtype";
"Options.Applicative.Help.Core" -> "Data.Tuple";
"Options.Applicative.Help.Core" -> "Options.Applicative.Common";
"Options.Applicative.Help.Core" -> "Options.Applicative.Help.Chunk";
"Options.Applicative.Help.Core" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.Help.Core" -> "Options.Applicative.Types";
"Options.Applicative.Help.Core" -> "Options.Applicative.Types";
"Options.Applicative.Help.Levenshtein" -> "Prelude";
"Options.Applicative.Help.Levenshtein" -> "Data.Array";
"Options.Applicative.Help.Levenshtein" -> "Data.Array";
"Options.Applicative.Help.Levenshtein" -> "Data.Function.Memoize";
"Options.Applicative.Help.Levenshtein" -> "Data.NonEmpty";
"Options.Applicative.Help.Levenshtein" -> "Data.Semigroup.Foldable";
"Options.Applicative.Help.Levenshtein" -> "Partial.Unsafe";
"Options.Applicative.Help.Pretty" -> "Text.PrettyPrint.Leijen";
"Options.Applicative.Help.Pretty" -> "Text.PrettyPrint.Leijen";
"Options.Applicative.Help.Types" -> "Prelude";
"Options.Applicative.Help.Types" -> "Data.Newtype";
"Options.Applicative.Help.Types" -> "Options.Applicative.Help.Chunk";
"Options.Applicative.Help.Types" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.Internal" -> "Prelude";
"Options.Applicative.Internal" -> "Control.Alternative";
"Options.Applicative.Internal" -> "Control.Monad.Except";
"Options.Applicative.Internal" -> "Control.Monad.Except.Trans";
"Options.Applicative.Internal" -> "Control.Monad.Reader";
"Options.Applicative.Internal" -> "Control.Monad.Reader.Trans";
"Options.Applicative.Internal" -> "Control.Monad.State.Trans";
"Options.Applicative.Internal" -> "Control.MonadPlus";
"Options.Applicative.Internal" -> "Data.Array";
"Options.Applicative.Internal" -> "Data.Either";
"Options.Applicative.Internal" -> "Data.Exists";
"Options.Applicative.Internal" -> "Data.List";
"Options.Applicative.Internal" -> "Data.List";
"Options.Applicative.Internal" -> "Data.Maybe";
"Options.Applicative.Internal" -> "Data.Newtype";
"Options.Applicative.Internal" -> "Data.Tuple";
"Options.Applicative.Internal" -> "Options.Applicative.Types";
"Options.Applicative.Internal" -> "Options.Applicative.Types";
"Options.Applicative.Internal.Utils" -> "Prelude";
"Options.Applicative.Internal.Utils" -> "Control.Apply";
"Options.Applicative.Internal.Utils" -> "Data.Either";
"Options.Applicative.Internal.Utils" -> "Data.Foldable";
"Options.Applicative.Internal.Utils" -> "Data.Maybe";
"Options.Applicative.Internal.Utils" -> "Data.String";
"Options.Applicative.Internal.Utils" -> "Data.String.Regex";
"Options.Applicative.Internal.Utils" -> "Data.String.Regex";
"Options.Applicative.Internal.Utils" -> "Data.String.Regex.Flags";
"Options.Applicative.Internal.Utils" -> "Partial.Unsafe";
"Options.Applicative.Types" -> "Prelude";
"Options.Applicative.Types" -> "Control.Alternative";
"Options.Applicative.Types" -> "Control.Monad.Except";
"Options.Applicative.Types" -> "Control.Monad.Except.Trans";
"Options.Applicative.Types" -> "Control.Monad.Free";
"Options.Applicative.Types" -> "Control.Monad.Reader.Trans";
"Options.Applicative.Types" -> "Control.Monad.Rec.Class";
"Options.Applicative.Types" -> "Control.Monad.Trans.Class";
"Options.Applicative.Types" -> "Data.Bifunctor";
"Options.Applicative.Types" -> "Data.Exists";
"Options.Applicative.Types" -> "Data.Generic.Rep";
"Options.Applicative.Types" -> "Data.Show.Generic";
"Options.Applicative.Types" -> "Data.List";
"Options.Applicative.Types" -> "Data.List";
"Options.Applicative.Types" -> "Data.List.NonEmpty";
"Options.Applicative.Types" -> "Data.List.Types";
"Options.Applicative.Types" -> "Data.Maybe";
"Options.Applicative.Types" -> "Data.Newtype";
"Options.Applicative.Types" -> "Data.Tuple.Nested";
"Options.Applicative.Types" -> "Effect";
"Options.Applicative.Types" -> "ExitCodes";
"Options.Applicative.Types" -> "Options.Applicative.Help.Chunk";
"Options.Applicative.Types" -> "Options.Applicative.Help.Pretty";
"Options.Applicative.Types" -> "Options.Applicative.Help.Types";
"Options.Applicative.Types" -> "Options.Applicative.Help.Types";
"PSCI.Support" -> "Prelude";
"PSCI.Support" -> "Effect";
"PSCI.Support" -> "Effect.Console";
"Partial.Unsafe" -> "Partial";
"Pipes" -> "Prelude";
"Pipes" -> "Pipes.Core";
"Pipes" -> "Pipes.Internal";
"Pipes" -> "Data.Foldable";
"Pipes" -> "Data.Tuple";
"Pipes" -> "Data.Either";
"Pipes" -> "Data.Foldable";
"Pipes.Core" -> "Prelude";
"Pipes.Core" -> "Pipes.Internal";
"Pipes.Core" -> "Pipes.Internal";
"Pipes.Core" -> "Control.Monad.Rec.Class";
"Pipes.Internal" -> "Prelude";
"Pipes.Internal" -> "Control.Alt";
"Pipes.Internal" -> "Control.Alternative";
"Pipes.Internal" -> "Control.Monad.Except.Trans";
"Pipes.Internal" -> "Control.Monad.Morph";
"Pipes.Internal" -> "Control.Monad.Reader.Class";
"Pipes.Internal" -> "Control.Monad.Rec.Class";
"Pipes.Internal" -> "Control.Monad.State.Class";
"Pipes.Internal" -> "Control.Monad.Trans.Class";
"Pipes.Internal" -> "Control.Monad.Writer.Class";
"Pipes.Internal" -> "Control.MonadPlus";
"Pipes.Internal" -> "Control.Plus";
"Pipes.Internal" -> "Data.Tuple";
"Pipes.Internal" -> "Effect.Aff.Class";
"Pipes.Internal" -> "Effect.Class";
"Pipes.ListT" -> "Prelude";
"Pipes.ListT" -> "Control.Alt";
"Pipes.ListT" -> "Control.Alternative";
"Pipes.ListT" -> "Control.Monad.Except.Trans";
"Pipes.ListT" -> "Control.Monad.Maybe.Trans";
"Pipes.ListT" -> "Control.Monad.Reader.Class";
"Pipes.ListT" -> "Control.Monad.Rec.Class";
"Pipes.ListT" -> "Control.Monad.State.Class";
"Pipes.ListT" -> "Control.Monad.Writer.Class";
"Pipes.ListT" -> "Control.Plus";
"Pipes.ListT" -> "Data.Either";
"Pipes.ListT" -> "Data.Maybe";
"Pipes.ListT" -> "Data.Tuple";
"Pipes.ListT" -> "Effect.Class";
"Pipes.ListT" -> "Pipes";
"Pipes.ListT" -> "Pipes.Core";
"Pipes.ListT" -> "Pipes.Internal";
"Pipes.Prelude" -> "Prelude";
"Pipes.Prelude" -> "Prelude";
"Pipes.Prelude" -> "Pipes";
"Pipes.Prelude" -> "Pipes";
"Pipes.Prelude" -> "Pipes.Core";
"Pipes.Prelude" -> "Pipes.Internal";
"Pipes.Prelude" -> "Data.List";
"Pipes.Prelude" -> "Data.Identity";
"Pipes.Prelude" -> "Data.Newtype";
"Pipes.Prelude" -> "Data.Maybe";
"Pipes.Prelude" -> "Data.Either";
"Pipes.Prelude" -> "Data.Foldable";
"Pipes.Prelude" -> "Data.Tuple";
"Pipes.Prelude" -> "Control.Monad.Trans.Class";
"Prelude" -> "Control.Applicative";
"Prelude" -> "Control.Apply";
"Prelude" -> "Control.Bind";
"Prelude" -> "Control.Category";
"Prelude" -> "Control.Monad";
"Prelude" -> "Control.Semigroupoid";
"Prelude" -> "Data.Boolean";
"Prelude" -> "Data.BooleanAlgebra";
"Prelude" -> "Data.Bounded";
"Prelude" -> "Data.CommutativeRing";
"Prelude" -> "Data.DivisionRing";
"Prelude" -> "Data.Eq";
"Prelude" -> "Data.EuclideanRing";
"Prelude" -> "Data.Field";
"Prelude" -> "Data.Function";
"Prelude" -> "Data.Functor";
"Prelude" -> "Data.HeytingAlgebra";
"Prelude" -> "Data.Monoid";
"Prelude" -> "Data.NaturalTransformation";
"Prelude" -> "Data.Ord";
"Prelude" -> "Data.Ordering";
"Prelude" -> "Data.Ring";
"Prelude" -> "Data.Semigroup";
"Prelude" -> "Data.Semiring";
"Prelude" -> "Data.Show";
"Prelude" -> "Data.Unit";
"Prelude" -> "Data.Void";
"Record" -> "Prelude";
"Record" -> "Data.Function.Uncurried";
"Record" -> "Data.Symbol";
"Record" -> "Record.Unsafe";
"Record" -> "Record.Unsafe.Union";
"Record" -> "Type.Proxy";
"Record" -> "Unsafe.Coerce";
"Record.Builder" -> "Prelude";
"Record.Builder" -> "Data.Function";
"Record.Builder" -> "Data.Function.Uncurried";
"Record.Builder" -> "Data.Symbol";
"Record.Builder" -> "Record.Unsafe.Union";
"Record.Builder" -> "Type.Proxy";
"Record.Builder" -> "Unsafe.Coerce";
"Record.Unsafe.Union" -> "Data.Function.Uncurried";
"Safe.Coerce" -> "Unsafe.Coerce";
"Test.Spec" -> "Prelude";
"Test.Spec" -> "Control.Alt";
"Test.Spec" -> "Control.Alternative";
"Test.Spec" -> "Control.Monad.Cont";
"Test.Spec" -> "Control.Monad.Error.Class";
"Test.Spec" -> "Control.Monad.Fork.Class";
"Test.Spec" -> "Control.Monad.Reader";
"Test.Spec" -> "Control.Monad.Rec.Class";
"Test.Spec" -> "Control.Monad.State";
"Test.Spec" -> "Control.Monad.Writer";
"Test.Spec" -> "Control.MonadPlus";
"Test.Spec" -> "Control.Plus";
"Test.Spec" -> "Data.Array.NonEmpty";
"Test.Spec" -> "Data.Bifunctor";
"Test.Spec" -> "Data.Either";
"Test.Spec" -> "Data.Foldable";
"Test.Spec" -> "Data.Function";
"Test.Spec" -> "Data.Identity";
"Test.Spec" -> "Data.Maybe";
"Test.Spec" -> "Data.Newtype";
"Test.Spec" -> "Effect.AVar";
"Test.Spec" -> "Effect.AVar";
"Test.Spec" -> "Effect.Aff";
"Test.Spec" -> "Effect.Aff.AVar";
"Test.Spec" -> "Effect.Aff.Class";
"Test.Spec" -> "Effect.Class";
"Test.Spec" -> "Effect.Exception";
"Test.Spec" -> "Test.Spec.Tree";
"Test.Spec" -> "Test.Spec.Tree";
"Test.Spec.Assertions" -> "Prelude";
"Test.Spec.Assertions" -> "Control.Monad.Error.Class";
"Test.Spec.Assertions" -> "Data.Either";
"Test.Spec.Assertions" -> "Data.Foldable";
"Test.Spec.Assertions" -> "Data.Newtype";
"Test.Spec.Assertions" -> "Effect.Exception";
"Test.Spec.Assertions.String" -> "Prelude";
"Test.Spec.Assertions.String" -> "Control.Monad.Error.Class";
"Test.Spec.Assertions.String" -> "Data.String";
"Test.Spec.Assertions.String" -> "Effect.Exception";
"Test.Spec.Assertions.String" -> "Test.Spec.Assertions";
"Test.Spec.Config" -> "Prelude";
"Test.Spec.Config" -> "Data.Maybe";
"Test.Spec.Config" -> "Data.Time.Duration";
"Test.Spec.Config" -> "Test.Spec";
"Test.Spec.Console" -> "Prelude";
"Test.Spec.Console" -> "Control.Monad.Writer";
"Test.Spec.Console" -> "Data.Foldable";
"Test.Spec.Console" -> "Effect";
"Test.Spec.Console" -> "Effect.Class";
"Test.Spec.Reporter" -> "Test.Spec.Reporter.Base";
"Test.Spec.Reporter" -> "Test.Spec.Reporter.Console";
"Test.Spec.Reporter" -> "Test.Spec.Reporter.Dot";
"Test.Spec.Reporter" -> "Test.Spec.Reporter.Spec";
"Test.Spec.Reporter.Base" -> "Prelude";
"Test.Spec.Reporter.Base" -> "Control.Monad.State";
"Test.Spec.Reporter.Base" -> "Control.Monad.State";
"Test.Spec.Reporter.Base" -> "Control.Monad.Trans.Class";
"Test.Spec.Reporter.Base" -> "Control.Monad.Writer";
"Test.Spec.Reporter.Base" -> "Data.Either";
"Test.Spec.Reporter.Base" -> "Data.Foldable";
"Test.Spec.Reporter.Base" -> "Data.Generic.Rep";
"Test.Spec.Reporter.Base" -> "Data.Map";
"Test.Spec.Reporter.Base" -> "Data.Map";
"Test.Spec.Reporter.Base" -> "Data.Maybe";
"Test.Spec.Reporter.Base" -> "Data.Show.Generic";
"Test.Spec.Reporter.Base" -> "Data.Tuple";
"Test.Spec.Reporter.Base" -> "Data.Tuple.Nested";
"Test.Spec.Reporter.Base" -> "Effect.Class";
"Test.Spec.Reporter.Base" -> "Effect.Exception";
"Test.Spec.Reporter.Base" -> "Pipes";
"Test.Spec.Reporter.Base" -> "Pipes.Core";
"Test.Spec.Reporter.Base" -> "Test.Spec";
"Test.Spec.Reporter.Base" -> "Test.Spec";
"Test.Spec.Reporter.Base" -> "Test.Spec.Console";
"Test.Spec.Reporter.Base" -> "Test.Spec.Console";
"Test.Spec.Reporter.Base" -> "Test.Spec.Result";
"Test.Spec.Reporter.Base" -> "Test.Spec.Runner";
"Test.Spec.Reporter.Base" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Base" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Base" -> "Test.Spec.Style";
"Test.Spec.Reporter.Base" -> "Test.Spec.Style";
"Test.Spec.Reporter.Base" -> "Test.Spec.Summary";
"Test.Spec.Reporter.Base" -> "Test.Spec.Summary";
"Test.Spec.Reporter.Base" -> "Test.Spec.Tree";
"Test.Spec.Reporter.Console" -> "Prelude";
"Test.Spec.Reporter.Console" -> "Control.Monad.State";
"Test.Spec.Reporter.Console" -> "Control.Monad.Writer";
"Test.Spec.Reporter.Console" -> "Data.Foldable";
"Test.Spec.Reporter.Console" -> "Data.Generic.Rep";
"Test.Spec.Reporter.Console" -> "Data.Map";
"Test.Spec.Reporter.Console" -> "Data.Map";
"Test.Spec.Reporter.Console" -> "Data.Maybe";
"Test.Spec.Reporter.Console" -> "Data.Show.Generic";
"Test.Spec.Reporter.Console" -> "Effect.Exception";
"Test.Spec.Reporter.Console" -> "Test.Spec.Console";
"Test.Spec.Reporter.Console" -> "Test.Spec.Reporter.Base";
"Test.Spec.Reporter.Console" -> "Test.Spec.Result";
"Test.Spec.Reporter.Console" -> "Test.Spec.Runner";
"Test.Spec.Reporter.Console" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Console" -> "Test.Spec.Style";
"Test.Spec.Reporter.Console" -> "Test.Spec.Style";
"Test.Spec.Reporter.Console" -> "Test.Spec.Summary";
"Test.Spec.Reporter.Console" -> "Test.Spec.Summary";
"Test.Spec.Reporter.Console" -> "Test.Spec.Tree";
"Test.Spec.Reporter.Dot" -> "Prelude";
"Test.Spec.Reporter.Dot" -> "Control.Monad.State";
"Test.Spec.Reporter.Dot" -> "Control.Monad.Writer";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Style";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Style";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Console";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Reporter.Base";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Result";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Runner";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Dot" -> "Test.Spec.Speed";
"Test.Spec.Reporter.Spec" -> "Prelude";
"Test.Spec.Reporter.Spec" -> "Control.Monad.State";
"Test.Spec.Reporter.Spec" -> "Control.Monad.Writer";
"Test.Spec.Reporter.Spec" -> "Data.Array";
"Test.Spec.Reporter.Spec" -> "Data.Generic.Rep";
"Test.Spec.Reporter.Spec" -> "Data.Int";
"Test.Spec.Reporter.Spec" -> "Data.Map";
"Test.Spec.Reporter.Spec" -> "Data.Map";
"Test.Spec.Reporter.Spec" -> "Data.Maybe";
"Test.Spec.Reporter.Spec" -> "Data.Show.Generic";
"Test.Spec.Reporter.Spec" -> "Data.Time.Duration";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Console";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Reporter.Base";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Result";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Runner";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Speed";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Style";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Style";
"Test.Spec.Reporter.Spec" -> "Test.Spec.Tree";
"Test.Spec.Reporter.Tap" -> "Prelude";
"Test.Spec.Reporter.Tap" -> "Control.Monad.State";
"Test.Spec.Reporter.Tap" -> "Data.Maybe";
"Test.Spec.Reporter.Tap" -> "Data.String";
"Test.Spec.Reporter.Tap" -> "Data.String.Regex";
"Test.Spec.Reporter.Tap" -> "Data.String.Regex.Unsafe";
"Test.Spec.Reporter.Tap" -> "Effect.Exception";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Console";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Reporter.Base";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Result";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Runner";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Summary";
"Test.Spec.Reporter.Tap" -> "Test.Spec.Summary";
"Test.Spec.Reporter.TeamCity" -> "Prelude";
"Test.Spec.Reporter.TeamCity" -> "Control.Monad.State";
"Test.Spec.Reporter.TeamCity" -> "Data.Foldable";
"Test.Spec.Reporter.TeamCity" -> "Data.Int";
"Test.Spec.Reporter.TeamCity" -> "Data.Maybe";
"Test.Spec.Reporter.TeamCity" -> "Data.Newtype";
"Test.Spec.Reporter.TeamCity" -> "Data.String.Pattern";
"Test.Spec.Reporter.TeamCity" -> "Data.Time.Duration";
"Test.Spec.Reporter.TeamCity" -> "Effect.Exception";
"Test.Spec.Reporter.TeamCity" -> "Test.Spec.Console";
"Test.Spec.Reporter.TeamCity" -> "Test.Spec.Reporter.Base";
"Test.Spec.Reporter.TeamCity" -> "Test.Spec.Result";
"Test.Spec.Reporter.TeamCity" -> "Test.Spec.Runner";
"Test.Spec.Reporter.TeamCity" -> "Test.Spec.Tree";
"Test.Spec.Reporter.TeamCity" -> "Data.Array";
"Test.Spec.Reporter.TeamCity" -> "Effect.Exception";
"Test.Spec.Reporter.TeamCity" -> "Test.Spec.Runner.Event";
"Test.Spec.Reporter.TeamCity" -> "Data.Map.Internal";
"Test.Spec.Reporter.TeamCity" -> "Data.String.Regex";
"Test.Spec.Reporter.TeamCity" -> "Data.String.Regex.Flags";
"Test.Spec.Reporter.TeamCity" -> "Data.String.Regex.Unsafe";
"Test.Spec.Reporter.TeamCity" -> "Data.String.CodeUnits";
"Test.Spec.Reporter.TeamCity" -> "Data.String.Common";
"Test.Spec.Result" -> "Prelude";
"Test.Spec.Result" -> "Data.Function";
"Test.Spec.Result" -> "Data.Time.Duration";
"Test.Spec.Result" -> "Effect.Exception";
"Test.Spec.Result" -> "Effect.Exception";
"Test.Spec.Result" -> "Test.Spec.Speed";
"Test.Spec.Runner" -> "Prelude";
"Test.Spec.Runner" -> "Control.Alternative";
"Test.Spec.Runner" -> "Control.Monad.Trans.Class";
"Test.Spec.Runner" -> "Control.Parallel";
"Test.Spec.Runner" -> "Data.Array";
"Test.Spec.Runner" -> "Data.Array.NonEmpty";
"Test.Spec.Runner" -> "Data.DateTime.Instant";
"Test.Spec.Runner" -> "Data.Either";
"Test.Spec.Runner" -> "Data.Foldable";
"Test.Spec.Runner" -> "Data.Identity";
"Test.Spec.Runner" -> "Data.Int";
"Test.Spec.Runner" -> "Data.Maybe";
"Test.Spec.Runner" -> "Data.Newtype";
"Test.Spec.Runner" -> "Data.Time.Duration";
"Test.Spec.Runner" -> "Data.Traversable";
"Test.Spec.Runner" -> "Data.Tuple.Nested";
"Test.Spec.Runner" -> "Effect";
"Test.Spec.Runner" -> "Effect.Aff";
"Test.Spec.Runner" -> "Effect.Aff.AVar";
"Test.Spec.Runner" -> "Effect.Class";
"Test.Spec.Runner" -> "Effect.Exception";
"Test.Spec.Runner" -> "Effect.Now";
"Test.Spec.Runner" -> "Effect.Ref";
"Test.Spec.Runner" -> "Pipes";
"Test.Spec.Runner" -> "Pipes.Core";
"Test.Spec.Runner" -> "Pipes.Core";
"Test.Spec.Runner" -> "Test.Spec";
"Test.Spec.Runner" -> "Test.Spec.Config";
"Test.Spec.Runner" -> "Test.Spec.Console";
"Test.Spec.Runner" -> "Test.Spec.Result";
"Test.Spec.Runner" -> "Test.Spec.Runner.Event";
"Test.Spec.Runner" -> "Test.Spec.Runner.Event";
"Test.Spec.Runner" -> "Test.Spec.Speed";
"Test.Spec.Runner" -> "Test.Spec.Style";
"Test.Spec.Runner" -> "Test.Spec.Style";
"Test.Spec.Runner" -> "Test.Spec.Summary";
"Test.Spec.Runner" -> "Test.Spec.Tree";
"Test.Spec.Runner.Event" -> "Prelude";
"Test.Spec.Runner.Event" -> "Test.Spec";
"Test.Spec.Runner.Event" -> "Test.Spec.Result";
"Test.Spec.Runner.Event" -> "Test.Spec.Tree";
"Test.Spec.Runner.Node" -> "Prelude";
"Test.Spec.Runner.Node" -> "Data.Identity";
"Test.Spec.Runner.Node" -> "Data.Newtype";
"Test.Spec.Runner.Node" -> "Effect";
"Test.Spec.Runner.Node" -> "Effect.Aff";
"Test.Spec.Runner.Node" -> "Effect.Class";
"Test.Spec.Runner.Node" -> "Node.Process";
"Test.Spec.Runner.Node" -> "Test.Spec";
"Test.Spec.Runner.Node" -> "Test.Spec.Result";
"Test.Spec.Runner.Node" -> "Test.Spec.Runner";
"Test.Spec.Runner.Node" -> "Test.Spec.Runner";
"Test.Spec.Runner.Node" -> "Test.Spec.Runner.Node.Config";
"Test.Spec.Runner.Node" -> "Test.Spec.Runner.Node.Persist";
"Test.Spec.Runner.Node" -> "Test.Spec.Summary";
"Test.Spec.Runner.Node" -> "Test.Spec.Tree";
"Test.Spec.Runner.Node.Config" -> "Prelude";
"Test.Spec.Runner.Node.Config" -> "Control.Alt";
"Test.Spec.Runner.Node.Config" -> "Control.Alternative";
"Test.Spec.Runner.Node.Config" -> "Control.Apply";
"Test.Spec.Runner.Node.Config" -> "Data.Array";
"Test.Spec.Runner.Node.Config" -> "Data.Either";
"Test.Spec.Runner.Node.Config" -> "Data.Int";
"Test.Spec.Runner.Node.Config" -> "Data.Map";
"Test.Spec.Runner.Node.Config" -> "Data.Maybe";
"Test.Spec.Runner.Node.Config" -> "Data.Set";
"Test.Spec.Runner.Node.Config" -> "Data.String";
"Test.Spec.Runner.Node.Config" -> "Data.String.Regex";
"Test.Spec.Runner.Node.Config" -> "Data.String.Regex.Flags";
"Test.Spec.Runner.Node.Config" -> "Data.Time.Duration";
"Test.Spec.Runner.Node.Config" -> "Data.Traversable";
"Test.Spec.Runner.Node.Config" -> "Data.Tuple";
"Test.Spec.Runner.Node.Config" -> "Data.Tuple.Nested";
"Test.Spec.Runner.Node.Config" -> "Effect.Aff.Class";
"Test.Spec.Runner.Node.Config" -> "Effect.Class";
"Test.Spec.Runner.Node.Config" -> "Options.Applicative";
"Test.Spec.Runner.Node.Config" -> "Partial";
"Test.Spec.Runner.Node.Config" -> "Partial.Unsafe";
"Test.Spec.Runner.Node.Config" -> "Test.Spec.Runner";
"Test.Spec.Runner.Node.Config" -> "Test.Spec.Runner";
"Test.Spec.Runner.Node.Config" -> "Test.Spec.Runner.Node.Persist";
"Test.Spec.Runner.Node.Config" -> "Test.Spec.Tree";
"Test.Spec.Runner.Node.Persist" -> "Prelude";
"Test.Spec.Runner.Node.Persist" -> "Data.Argonaut.Core";
"Test.Spec.Runner.Node.Persist" -> "Data.Argonaut.Decode";
"Test.Spec.Runner.Node.Persist" -> "Data.Argonaut.Decode.Decoders";
"Test.Spec.Runner.Node.Persist" -> "Data.Argonaut.Encode";
"Test.Spec.Runner.Node.Persist" -> "Data.Argonaut.Encode.Encoders";
"Test.Spec.Runner.Node.Persist" -> "Data.Argonaut.Parser";
"Test.Spec.Runner.Node.Persist" -> "Data.DateTime.Instant";
"Test.Spec.Runner.Node.Persist" -> "Data.Either";
"Test.Spec.Runner.Node.Persist" -> "Data.Map";
"Test.Spec.Runner.Node.Persist" -> "Data.Maybe";
"Test.Spec.Runner.Node.Persist" -> "Data.Newtype";
"Test.Spec.Runner.Node.Persist" -> "Data.Number";
"Test.Spec.Runner.Node.Persist" -> "Data.String";
"Test.Spec.Runner.Node.Persist" -> "Data.Tuple.Nested";
"Test.Spec.Runner.Node.Persist" -> "Effect.Aff";
"Test.Spec.Runner.Node.Persist" -> "Effect.Class";
"Test.Spec.Runner.Node.Persist" -> "Effect.Now";
"Test.Spec.Runner.Node.Persist" -> "Node.Encoding";
"Test.Spec.Runner.Node.Persist" -> "Node.FS.Aff";
"Test.Spec.Runner.Node.Persist" -> "Test.Spec.Result";
"Test.Spec.Runner.Node.Persist" -> "Test.Spec.Tree";
"Test.Spec.Speed" -> "Prelude";
"Test.Spec.Speed" -> "Data.Eq.Generic";
"Test.Spec.Speed" -> "Data.Generic.Rep";
"Test.Spec.Speed" -> "Data.Show.Generic";
"Test.Spec.Speed" -> "Data.Time.Duration";
"Test.Spec.Speed" -> "Test.Spec.Style";
"Test.Spec.Speed" -> "Test.Spec.Style";
"Test.Spec.Style" -> "Prelude";
"Test.Spec.Style" -> "Ansi.Codes";
"Test.Spec.Style" -> "Ansi.Codes";
"Test.Spec.Style" -> "Data.Array";
"Test.Spec.Style" -> "Data.List.NonEmpty";
"Test.Spec.Style" -> "Data.Maybe";
"Test.Spec.Style" -> "Data.String.CodeUnits";
"Test.Spec.Summary" -> "Prelude";
"Test.Spec.Summary" -> "Data.Foldable";
"Test.Spec.Summary" -> "Data.Maybe";
"Test.Spec.Summary" -> "Data.Newtype";
"Test.Spec.Summary" -> "Test.Spec.Result";
"Test.Spec.Summary" -> "Test.Spec.Tree";
"Test.Spec.Tree" -> "Prelude";
"Test.Spec.Tree" -> "Control.Monad.State";
"Test.Spec.Tree" -> "Control.Monad.State";
"Test.Spec.Tree" -> "Data.Array";
"Test.Spec.Tree" -> "Data.Array.NonEmpty";
"Test.Spec.Tree" -> "Data.Array.NonEmpty";
"Test.Spec.Tree" -> "Data.Bifunctor";
"Test.Spec.Tree" -> "Data.Either";
"Test.Spec.Tree" -> "Data.Foldable";
"Test.Spec.Tree" -> "Data.Maybe";
"Test.Spec.Tree" -> "Data.Newtype";
"Test.Spec.Tree" -> "Data.Traversable";
"Test.Spec.Tree" -> "Data.Tuple.Nested";
"Text.PrettyPrint.Leijen" -> "Prelude";
"Text.PrettyPrint.Leijen" -> "Data.Array";
"Text.PrettyPrint.Leijen" -> "Data.Foldable";
"Text.PrettyPrint.Leijen" -> "Data.Generic.Rep";
"Text.PrettyPrint.Leijen" -> "Data.Show.Generic";
"Text.PrettyPrint.Leijen" -> "Data.Int";
"Text.PrettyPrint.Leijen" -> "Data.Lazy";
"Text.PrettyPrint.Leijen" -> "Data.List";
"Text.PrettyPrint.Leijen" -> "Data.List.Lazy";
"Text.PrettyPrint.Leijen" -> "Data.Maybe";
"Text.PrettyPrint.Leijen" -> "Data.String";
"Text.PrettyPrint.Leijen" -> "Data.String";
"Text.PrettyPrint.Leijen" -> "Data.String.CodeUnits";
"Text.PrettyPrint.Leijen" -> "Partial.Unsafe";
"Type.Data.Boolean" -> "Type.Proxy";
"Type.Data.Ordering" -> "Data.Ordering";
"Type.Data.Ordering" -> "Type.Data.Boolean";
"Type.Data.Ordering" -> "Type.Proxy";
"Type.Data.Symbol" -> "Data.Symbol";
"Type.Data.Symbol" -> "Type.Data.Ordering";
"Type.Data.Symbol" -> "Type.Data.Ordering";
"Type.Data.Symbol" -> "Type.Proxy";
"Type.Prelude" -> "Type.Data.Boolean";
"Type.Prelude" -> "Type.Data.Ordering";
"Type.Prelude" -> "Type.Proxy";
"Type.Prelude" -> "Type.Data.Symbol";
"Type.Prelude" -> "Type.Equality";
"Type.Prelude" -> "Type.Row";
"Type.Prelude" -> "Type.RowList";
"Type.Row.Homogeneous" -> "Type.Equality";
"Type.Row.Homogeneous" -> "Type.RowList";
"Type.RowList" -> "Type.Equality";
"Type.RowList" -> "Type.Data.Symbol";
"Type.RowList" -> "Type.Data.Boolean";
}
